{"ast":null,"code":"import { ShowdownConfig } from './showdown-config.provider';\nimport { ShowdownConverter } from './showdown-converter.provider';\nimport { ShowdownComponent } from './showdown.component';\nimport { ShowdownPipe } from './showdown.pipe';\nimport { SourceDirective } from './source.directive';\nimport * as i0 from \"@angular/core\";\n/**\n * @internal\n */\nconst DECLARATIONS = [ShowdownComponent, ShowdownPipe, SourceDirective];\n/**\n * ### Example\n *\n * Add `ShowdownModule` to app `imports`.\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownModule } from 'ngx-showdown';\n *\n * @NgModule({\n *   imports: [ ShowdownModule ];\n * })\n * export class AppModule {}\n * ```\n */\nexport let ShowdownModule = /*#__PURE__*/(() => {\n  class ShowdownModule {\n    /**\n     * __Example :__\n     *\n     * Add `ShowdownModule` to app `imports` with config.\n     * ```typescript\n     * import { NgModule } from '@angular/core';\n     * import { ShowdownModule } from 'ngx-showdown';\n     *\n     * @NgModule({\n     *   imports: [ ShowdownModule.forRoot({\n     *     smartIndentationFix: true,\n     *     foo: 'bar',\n     *     flavor: 'github',\n     *     extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]\n     *   }) ];\n     * })\n     * export class AppModule {}\n     * ```\n     * @param config - A root converter config for all converter instances.\n     */\n    static forRoot(config) {\n      return {\n        ngModule: ShowdownModule,\n        providers: [{\n          provide: ShowdownConfig,\n          useValue: config\n        }]\n      };\n    }\n    static #_ = this.ɵfac = function ShowdownModule_Factory(t) {\n      return new (t || ShowdownModule)();\n    };\n    static #_2 = this.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n      type: ShowdownModule\n    });\n    static #_3 = this.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n      providers: [ShowdownConverter]\n    });\n  }\n  return ShowdownModule;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}