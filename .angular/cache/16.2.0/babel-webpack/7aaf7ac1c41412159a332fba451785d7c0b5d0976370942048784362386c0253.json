{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./showdown.component\";\nimport * as i2 from \"@angular/common/http\";\n/**\n * A angular directive to `ShowdownComponent` for make http request of markdown content.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { HttpClientModule } from '@angular/common/http';\n * import { ShowdownComponent, SourceDirective } from 'ngx-showdown';\n *\n * @NgModule({\n *    declarations: [ ShowdownComponent, SourceDirective ],\n *    imports: [ HttpClientModule ]\n * })\n * export class AppModule {}\n * ```\n *\n * Bind url `src` directive\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *     selector: 'some',\n *     template: '<showdown [src]=\"url\" smartIndentationFix>**Loading...**</showdown>\n * })\n * class SomeComponent {\n *     url: string = 'https://unpkg.com/ngx-showdown/README.md';\n *     // ...\n * }\n * ```\n *\n * Set static url\n * ```html\n * <showdown src=\"README.md\" [options]=\"{noHeaderId: true}\"></showdown>\n * ```\n *\n * Set template reference variable\n * ```html\n * <showdown #source=\"source\" src=\"README.md\"></showdown>\n * ```\n *\n * Listening to `error` events.\n * ```html\n * <showdown #sd src=\"http://url.error\" (error)=\"sd.render('# '+$event.message)\"></showdown>\n * ```\n */\nexport let SourceDirective = /*#__PURE__*/(() => {\n  class SourceDirective {\n    constructor(_showdownComponent, _http) {\n      this._showdownComponent = _showdownComponent;\n      this._http = _http;\n      /**\n       * On error occur.\n       *\n       * __Example :__\n       *\n       * ```html\n       * <input type=\"text\" placeholder=\"url\" [(ngModel)]=\"url\"/>\n       * <showdown [src]=\"url\" (error)=\"sd.render('# Error\\n> '+$event.message)\">**Loading...**</showdown>\n       * ```\n       */\n      this.error = new EventEmitter();\n    }\n    /**\n     * A angular lifecycle method, Use to call to `load` method on src init/changes\n     * @internal\n     */\n    ngOnChanges() {\n      this.load();\n    }\n    /**\n     * Load the markdown content of {@link SourceDirective#src} url to {@link ShowdownComponent#value}.\n     *\n     * __Example :__\n     *\n     * ```html\n     * <input type=\"text\" #url value=\"source.src\" placeholder=\"Url\" />\n     * <button (click)=\"source.load(url.value)\">Load</button>\n     * <showdown #source=\"source\" src=\"https://unpkg.com/ngx-showdown/README.md\"></showdown>\n     * ```\n     * @param url - A url of markdown content to load (it will override the current url of `SourceDirective#src`)\n     */\n    load(url) {\n      if (url) {\n        this.src = url;\n      }\n      if (this.src) {\n        this._http.get(this.src, {\n          responseType: 'text'\n        }).subscribe(response => {\n          this._showdownComponent.render(response);\n        }, error => {\n          this.error.emit(error);\n        });\n      }\n    }\n    static #_ = this.ɵfac = function SourceDirective_Factory(t) {\n      return new (t || SourceDirective)(i0.ɵɵdirectiveInject(i1.ShowdownComponent), i0.ɵɵdirectiveInject(i2.HttpClient));\n    };\n    static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: SourceDirective,\n      selectors: [[\"showdown\", \"src\", \"\"], [\"\", \"showdown\", \"\", \"src\", \"\"]],\n      inputs: {\n        src: \"src\"\n      },\n      outputs: {\n        error: \"error\"\n      },\n      exportAs: [\"source\"],\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return SourceDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}