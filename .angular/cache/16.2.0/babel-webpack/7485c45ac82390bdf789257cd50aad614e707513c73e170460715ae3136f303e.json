{"ast":null,"code":"import { SecurityContext } from '@angular/core';\nimport { ShowdownConverter } from './showdown-converter.provider';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nimport * as i2 from \"./showdown-config.provider\";\nconst _c0 = [\"*\"];\n/**\n * @internal\n */\nconst MAP_OPTION = {\n  '': true,\n  true: true,\n  false: false\n};\n/**\n * @internal\n */\nlet _toOption = value => MAP_OPTION.hasOwnProperty(value) ? MAP_OPTION[value] : value;\n/**\n * The options keys for the dynamic properties set.\n * @internal\n */\nconst OPTIONS_PROPERTIES_KEYS = ['backslashEscapesHTMLTags', 'completeHTMLDocument', 'disableForced4SpacesIndentedSublists', 'emoji', 'encodeEmails', 'ghCodeBlocks', 'ghCompatibleHeaderId', 'ghMentions', 'ghMentionsLink', 'headerLevelStart', 'literalMidWordAsterisks', 'literalMidWordUnderscores', 'metadata', 'noHeaderId', 'omitExtraWLInCodeBlocks', 'openLinksInNewWindow', 'parseImgDimensions', 'prefixHeaderId', 'rawHeaderId', 'rawPrefixHeaderId', 'requireSpaceBeforeHeadingText', 'simpleLineBreaks', 'simplifiedAutoLink', 'smartIndentationFix', 'smoothLivePreview', 'splitAdjacentBlockquotes', 'strikethrough', 'tables', 'tablesHeaderId', 'tasklists', 'underline'];\n/**\n * A angular component for render `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownComponent } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownComponent ];\n * })\n * export class AppModule {}\n * ```\n *\n * Bind markdown value and options object\n * ```typescript\n * import { Component } from '@angular/core';\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: '<showdown [value]=\"text\" [options]=\"options\"></showdown>'\n * })\n * export class SomeComponent {\n *   text: string = `\n *     # Some header\n *     ---\n *     **Some bold**\n *   `;\n *   options: Showdown.ShowdownOptions = { smartIndentationFix: true };\n *   // ...\n * }\n * ```\n * Bind single option (it have properties for all showdown options).\n * ```html\n * <showdown emoji=\"true\"  noHeaderId># Some text :+1:</showdown>\n * ```\n *\n * Set static markdown value.\n * ```html\n * <showdown value=\"___Some static value___\" underline></showdown>\n * ```\n *\n * Use as directive on anther element.\n * ```html\n * <div showdown=\"# Div Element\" headerLevelStart=\"2\"></div>\n * ```\n *\n * Static markdown value in the element content.\n * ```html\n * <div>\n *    <showdown smartIndentationFix>\n *       # List:\n *       * a\n *            * A\n *       * b\n *    </showdown>\n * </div>\n * ```\n *\n * Set template reference variable.\n * ```html\n * <showdown #sd></showdown>\n * ```\n * Or\n * ```html\n * <div showdown #sd=\"showdown\"></div>\n * ```\n */\nexport let ShowdownComponent = /*#__PURE__*/(() => {\n  class ShowdownComponent extends ShowdownConverter {\n    /**\n     * Input alias to `value`.\n     *\n     * __Example :__\n     *\n     * ```html\n     * <div [showdown]=\"# Some Header\"></div>\n     * ```\n     *\n     * Equivalent to\n     * ```html\n     * <showdown [value]=\"# Some Header\"></showdown>\n     * ```\n     */\n    set showdown(value) {\n      this.value = value;\n    }\n    /**\n     * The showdown options of the converter.\n     *\n     * __Example :__\n     *\n     * Bind options\n     * ```typescript\n     * import { Component } from '@angular/core';\n     * import * as Showdown from 'showdown';\n     *\n     * @Component({\n     *   selector: `some`,\n     *   template: `<showdown [options]=\"options\"># Some Header<showdown>`\n     * })\n     * export class SomeComponent {\n     *   options: Showdown.ShowdownOptions = {headerLevelStart: 3};\n     *   // ...\n     * }\n     * ```\n     * Or\n     * ```html\n     * <showdown [options]=\"{smartIndentationFix: true}\"> # Indentation Fix<showdown>\n     * ```\n     */\n    get options() {\n      return this.getOptions();\n    }\n    set options(options) {\n      this.setOptions(options);\n    }\n    /**\n     * Enables html sanitize, it will sanitize the converter html output by [`DomSanitizer`](https://angular.io/api/platform-browser/DomSanitizer#sanitize).\n     *\n     * __Example :__\n     *\n     * ```typescript\n     * import { Component } from '@angular/core';\n     *\n     * @Component({\n     *   selector: 'some',\n     *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n     *   template: `\n     *     <h3>Input</h3>\n     *     <textarea class=\"box\" [(ngModel)]=\"text\"></textarea>\n     *     <input type=\"checkbox\" [(ngModel)]=\"sanitize\"/> <b>Sanitize</b>\n     *     <h3>Markdown</h3>\n     *     <pre class=\"box\"><code>{{ text }}</code></pre>\n     *     <h3>Preview</h3>\n     *     <div class=\"box\">\n     *       <showdown #sd [value]=\"text\" [sanitize]=\"sanitize\"></showdown>\n     *     </div>\n     *   `;\n     * })\n     * export class SomeComponent {\n     *    text: string = `# A cool link\n     * <a href=\"javascript:alert('Hello!')\">click me</a>`;\n     * }\n     * ```\n     */\n    set sanitize(sanitize) {\n      this._sanitize = _toOption(sanitize);\n    }\n    constructor(_elementRef, _domSanitizer, config) {\n      super(config);\n      this._elementRef = _elementRef;\n      this._domSanitizer = _domSanitizer;\n    }\n    /**\n     * A angular lifecycle method, Use on init to check if it `content` type and load the element `content` to `value`.\n     * @internal\n     */\n    ngOnInit() {\n      if (this.value === undefined && this._elementRef.nativeElement.innerHTML.trim() !== '') {\n        this.render(this._elementRef.nativeElement.innerHTML);\n      }\n    }\n    /**\n     * A angular lifecycle method, Use to call to render method after changes.\n     * @internal\n     */\n    ngOnChanges() {\n      this.render();\n    }\n    /**\n     * Convert the markdown value of {@link ShowdownComponent#value} to html and set the html result to the element content.\n     *\n     * __Example :__\n     *\n     * ```html\n     * <textarea #textarea (change)=\"showdown.render(textarea.value)\"/># Some Header</textarea>\n     * <showdown #showdown></showdown>\n     * ```\n     * @param value - A markdown value to render (it will override the current value of `ShowdownComponent#value`)\n     */\n    render(value) {\n      if (typeof value === 'string') {\n        this.value = value;\n      }\n      if (typeof this.value === 'string') {\n        let result = this.makeHtml(this.value);\n        if (this._sanitize) {\n          result = this._domSanitizer.sanitize(SecurityContext.HTML, result);\n        }\n        this._elementRef.nativeElement.innerHTML = result;\n      }\n    }\n    static #_ = this.ɵfac = function ShowdownComponent_Factory(t) {\n      return new (t || ShowdownComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.DomSanitizer, 8), i0.ɵɵdirectiveInject(i2.ShowdownConfig, 8));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ShowdownComponent,\n      selectors: [[\"showdown\"], [\"\", \"showdown\", \"\"]],\n      inputs: {\n        backslashEscapesHTMLTags: \"backslashEscapesHTMLTags\",\n        completeHTMLDocument: \"completeHTMLDocument\",\n        disableForced4SpacesIndentedSublists: \"disableForced4SpacesIndentedSublists\",\n        emoji: \"emoji\",\n        encodeEmails: \"encodeEmails\",\n        ghCodeBlocks: \"ghCodeBlocks\",\n        ghCompatibleHeaderId: \"ghCompatibleHeaderId\",\n        ghMentions: \"ghMentions\",\n        ghMentionsLink: \"ghMentionsLink\",\n        headerLevelStart: \"headerLevelStart\",\n        literalMidWordAsterisks: \"literalMidWordAsterisks\",\n        literalMidWordUnderscores: \"literalMidWordUnderscores\",\n        metadata: \"metadata\",\n        noHeaderId: \"noHeaderId\",\n        omitExtraWLInCodeBlocks: \"omitExtraWLInCodeBlocks\",\n        openLinksInNewWindow: \"openLinksInNewWindow\",\n        parseImgDimensions: \"parseImgDimensions\",\n        prefixHeaderId: \"prefixHeaderId\",\n        rawHeaderId: \"rawHeaderId\",\n        rawPrefixHeaderId: \"rawPrefixHeaderId\",\n        requireSpaceBeforeHeadingText: \"requireSpaceBeforeHeadingText\",\n        simpleLineBreaks: \"simpleLineBreaks\",\n        simplifiedAutoLink: \"simplifiedAutoLink\",\n        smartIndentationFix: \"smartIndentationFix\",\n        smoothLivePreview: \"smoothLivePreview\",\n        splitAdjacentBlockquotes: \"splitAdjacentBlockquotes\",\n        strikethrough: \"strikethrough\",\n        tables: \"tables\",\n        tablesHeaderId: \"tablesHeaderId\",\n        tasklists: \"tasklists\",\n        underline: \"underline\",\n        value: \"value\",\n        showdown: \"showdown\",\n        options: \"options\",\n        sanitize: \"sanitize\"\n      },\n      exportAs: [\"showdown\"],\n      features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n      ngContentSelectors: _c0,\n      decls: 1,\n      vars: 0,\n      template: function ShowdownComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵprojection(0);\n        }\n      },\n      encapsulation: 2\n    });\n  }\n  return ShowdownComponent;\n})();\n// Define options properties setter for angular directive and direct access\nfor (let key of OPTIONS_PROPERTIES_KEYS) {\n  Object.defineProperty(ShowdownComponent.prototype, key, {\n    set(value) {\n      this.setOption(key, _toOption(value));\n    },\n    configurable: true\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}