{"ast":null,"code":"import * as Showdown from 'showdown';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./showdown-config.provider\";\n/**\n * @internal\n */\nlet {\n  hasOwnProperty\n} = {};\n/**\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @NgModule({\n *   providers: [ ShowdownConverter ];\n * })\n * export class AppModule {}\n * ```\n *\n * Use the converter instance.\n * ```typescript\n * import { Injectable } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @Injectable()\n * export class SomeService {\n *   constructor(showdownConverter: ShowdownConverter) {\n *     let markdown: string = \"**Some**\";\n *     let html: string = showdownConverter.makeHtml(markdown);\n *     console.log(`some:\\nmarkdown: ${markdown)\\nhtml: ${html}\\n`);\n *   }\n * }\n * ```\n */\nexport let ShowdownConverter = /*#__PURE__*/(() => {\n  class ShowdownConverter extends Showdown.Converter {\n    constructor(config) {\n      super(config && {\n        extensions: config.extensions\n      });\n      this.setFlavor(config && config.flavor || 'vanilla');\n      this.setOptions(config);\n    }\n    /**\n     * Set options to the converter.\n     *\n     * @param options - A options object to set.\n     */\n    setOptions(options) {\n      for (let key in options) {\n        if (hasOwnProperty.call(options, key)) {\n          this.setOption(key, options[key]);\n        }\n      }\n    }\n    static #_ = this.ɵfac = function ShowdownConverter_Factory(t) {\n      return new (t || ShowdownConverter)(i0.ɵɵinject(i1.ShowdownConfig, 8));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ShowdownConverter,\n      factory: ShowdownConverter.ɵfac\n    });\n  }\n  return ShowdownConverter;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}