{"hash":"70d529745399f60db3bcb4422c4d580589c0de55","fesm2022":[{"exports":["ShowdownComponent","ShowdownConfig","ShowdownConverter","ShowdownModule","ShowdownPipe","SourceDirective"],"facadeModuleId":"/Users/khalil/Desktop/development/ngx-showdown/dist/lib/esm2022/ngx-showdown.mjs","isDynamicEntry":false,"isEntry":true,"isImplicitEntry":false,"moduleIds":["/Users/khalil/Desktop/development/ngx-showdown/dist/lib/esm2022/showdown-config.provider.mjs","/Users/khalil/Desktop/development/ngx-showdown/dist/lib/esm2022/showdown-converter.provider.mjs","/Users/khalil/Desktop/development/ngx-showdown/dist/lib/esm2022/showdown.component.mjs","/Users/khalil/Desktop/development/ngx-showdown/dist/lib/esm2022/source.directive.mjs","/Users/khalil/Desktop/development/ngx-showdown/dist/lib/esm2022/showdown.pipe.mjs","/Users/khalil/Desktop/development/ngx-showdown/dist/lib/esm2022/showdown.module.mjs","/Users/khalil/Desktop/development/ngx-showdown/dist/lib/esm2022/index.mjs","/Users/khalil/Desktop/development/ngx-showdown/dist/lib/esm2022/ngx-showdown.mjs"],"name":"ngx-showdown","type":"chunk","dynamicImports":[],"fileName":"ngx-showdown.mjs","implicitlyLoadedBefore":[],"importedBindings":{"@angular/core":["*","Injectable","Optional","SecurityContext","Component","Input","EventEmitter","Directive","Output","Pipe","NgModule"],"showdown":["*"],"@angular/platform-browser":["*"],"@angular/common/http":["*"]},"imports":["@angular/core","showdown","@angular/platform-browser","@angular/common/http"],"modules":{"/Users/khalil/Desktop/development/ngx-showdown/dist/lib/esm2022/showdown-config.provider.mjs":{"code":"/**\n * @internal\n */\nlet { hasOwnProperty: hasOwnProperty$1 } = {};\n/**\n * A config provider\n *\n * ### Example\n *\n * Set custom config provider.\n * ```typescript\n * import { NgModel } from '@angular/core';\n * import { ShowdownModule, ShowdownConfig } from 'ngx-showdown';\n *\n * export class MyShowdownConfig extends ShowdownConfig {\n *   emoji = true;\n *   underscore = false;\n *   flavor = 'github';\n * }\n *\n * @NgModel({\n *   imports: [ ShowdownModule ],\n *   providers: [ {provide: ShowdownConfig, useClass: MyConverterOptions} ]\n * })\n * export class AppModule {}\n * ```\n */\nclass ShowdownConfig {\n    /**\n     * @see https://github.com/showdownjs/showdown/blob/master/README.md#flavors\n     */\n    flavor;\n    constructor(options) {\n        this.merge(options);\n    }\n    /**\n     * Merge options\n     *\n     * @param options - A options object to merge.\n     */\n    merge(options) {\n        for (let key in options) {\n            if (hasOwnProperty$1.call(options, key)) {\n                this[key] = options[key];\n            }\n        }\n    }\n}","originalLength":3602,"removedExports":[],"renderedExports":["ShowdownConfig"],"renderedLength":1052},"/Users/khalil/Desktop/development/ngx-showdown/dist/lib/esm2022/showdown-converter.provider.mjs":{"code":"/**\n * @internal\n */\nlet { hasOwnProperty } = {};\n/**\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @NgModule({\n *   providers: [ ShowdownConverter ];\n * })\n * export class AppModule {}\n * ```\n *\n * Use the converter instance.\n * ```typescript\n * import { Injectable } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @Injectable()\n * export class SomeService {\n *   constructor(showdownConverter: ShowdownConverter) {\n *     let markdown: string = \"**Some**\";\n *     let html: string = showdownConverter.makeHtml(markdown);\n *     console.log(`some:\\nmarkdown: ${markdown)\\nhtml: ${html}\\n`);\n *   }\n * }\n * ```\n */\nclass ShowdownConverter extends Showdown.Converter {\n    constructor(config) {\n        super(config && { extensions: config.extensions });\n        this.setFlavor((config && config.flavor) || 'vanilla');\n        this.setOptions(config);\n    }\n    /**\n     * Set options to the converter.\n     *\n     * @param options - A options object to set.\n     */\n    setOptions(options) {\n        for (let key in options) {\n            if (hasOwnProperty.call(options, key)) {\n                this.setOption(key, options[key]);\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownConverter, deps: [{ token: ShowdownConfig, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownConverter });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownConverter, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: ShowdownConfig, decorators: [{\n                    type: Optional\n                }] }]; } });","originalLength":5490,"removedExports":[],"renderedExports":["ShowdownConverter"],"renderedLength":1963},"/Users/khalil/Desktop/development/ngx-showdown/dist/lib/esm2022/showdown.component.mjs":{"code":"/**\n * @internal\n */\nconst MAP_OPTION = {\n    '': true,\n    true: true,\n    false: false\n};\n/**\n * @internal\n */\nlet _toOption = (value) => MAP_OPTION.hasOwnProperty(value) ? MAP_OPTION[value] : value;\n/**\n * The options keys for the dynamic properties set.\n * @internal\n */\nconst OPTIONS_PROPERTIES_KEYS = [\n    'backslashEscapesHTMLTags',\n    'completeHTMLDocument',\n    'disableForced4SpacesIndentedSublists',\n    'emoji',\n    'encodeEmails',\n    'ghCodeBlocks',\n    'ghCompatibleHeaderId',\n    'ghMentions',\n    'ghMentionsLink',\n    'headerLevelStart',\n    'literalMidWordAsterisks',\n    'literalMidWordUnderscores',\n    'metadata',\n    'noHeaderId',\n    'omitExtraWLInCodeBlocks',\n    'openLinksInNewWindow',\n    'parseImgDimensions',\n    'prefixHeaderId',\n    'rawHeaderId',\n    'rawPrefixHeaderId',\n    'requireSpaceBeforeHeadingText',\n    'simpleLineBreaks',\n    'simplifiedAutoLink',\n    'smartIndentationFix',\n    'smoothLivePreview',\n    'splitAdjacentBlockquotes',\n    'strikethrough',\n    'tables',\n    'tablesHeaderId',\n    'tasklists',\n    'underline'\n];\n/**\n * A angular component for render `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownComponent } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownComponent ];\n * })\n * export class AppModule {}\n * ```\n *\n * Bind markdown value and options object\n * ```typescript\n * import { Component } from '@angular/core';\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: '<showdown [value]=\"text\" [options]=\"options\"></showdown>'\n * })\n * export class SomeComponent {\n *   text: string = `\n *     # Some header\n *     ---\n *     **Some bold**\n *   `;\n *   options: Showdown.ShowdownOptions = { smartIndentationFix: true };\n *   // ...\n * }\n * ```\n * Bind single option (it have properties for all showdown options).\n * ```html\n * <showdown emoji=\"true\"  noHeaderId># Some text :+1:</showdown>\n * ```\n *\n * Set static markdown value.\n * ```html\n * <showdown value=\"___Some static value___\" underline></showdown>\n * ```\n *\n * Use as directive on anther element.\n * ```html\n * <div showdown=\"# Div Element\" headerLevelStart=\"2\"></div>\n * ```\n *\n * Static markdown value in the element content.\n * ```html\n * <div>\n *    <showdown smartIndentationFix>\n *       # List:\n *       * a\n *            * A\n *       * b\n *    </showdown>\n * </div>\n * ```\n *\n * Set template reference variable.\n * ```html\n * <showdown #sd></showdown>\n * ```\n * Or\n * ```html\n * <div showdown #sd=\"showdown\"></div>\n * ```\n */\nclass ShowdownComponent extends ShowdownConverter {\n    _elementRef;\n    _domSanitizer;\n    /**\n     * The input markdown value.\n     *\n     * __Example :__\n     *\n     * Set some static markdown value.\n     * ```html\n     * <showdown value=\"**Some bold value**\"></showdown>\n     * ```\n     *\n     * Bind property with markdown value.\n     * ```html\n     * <textarea [(ngModel)]=\"text\"></textarea>\n     * <showdown [value]=\"text\"></showdown>\n     * ```\n     */\n    value;\n    /**\n     * Input alias to `value`.\n     *\n     * __Example :__\n     *\n     * ```html\n     * <div [showdown]=\"# Some Header\"></div>\n     * ```\n     *\n     * Equivalent to\n     * ```html\n     * <showdown [value]=\"# Some Header\"></showdown>\n     * ```\n     */\n    set showdown(value) {\n        this.value = value;\n    }\n    /**\n     * The showdown options of the converter.\n     *\n     * __Example :__\n     *\n     * Bind options\n     * ```typescript\n     * import { Component } from '@angular/core';\n     * import * as Showdown from 'showdown';\n     *\n     * @Component({\n     *   selector: `some`,\n     *   template: `<showdown [options]=\"options\"># Some Header<showdown>`\n     * })\n     * export class SomeComponent {\n     *   options: Showdown.ShowdownOptions = {headerLevelStart: 3};\n     *   // ...\n     * }\n     * ```\n     * Or\n     * ```html\n     * <showdown [options]=\"{smartIndentationFix: true}\"> # Indentation Fix<showdown>\n     * ```\n     */\n    get options() {\n        return this.getOptions();\n    }\n    set options(options) {\n        this.setOptions(options);\n    }\n    _sanitize;\n    /**\n     * Enables html sanitize, it will sanitize the converter html output by [`DomSanitizer`](https://angular.io/api/platform-browser/DomSanitizer#sanitize).\n     *\n     * __Example :__\n     *\n     * ```typescript\n     * import { Component } from '@angular/core';\n     *\n     * @Component({\n     *   selector: 'some',\n     *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n     *   template: `\n     *     <h3>Input</h3>\n     *     <textarea class=\"box\" [(ngModel)]=\"text\"></textarea>\n     *     <input type=\"checkbox\" [(ngModel)]=\"sanitize\"/> <b>Sanitize</b>\n     *     <h3>Markdown</h3>\n     *     <pre class=\"box\"><code>{{ text }}</code></pre>\n     *     <h3>Preview</h3>\n     *     <div class=\"box\">\n     *       <showdown #sd [value]=\"text\" [sanitize]=\"sanitize\"></showdown>\n     *     </div>\n     *   `;\n     * })\n     * export class SomeComponent {\n     *    text: string = `# A cool link\n     * <a href=\"javascript:alert('Hello!')\">click me</a>`;\n     * }\n     * ```\n     */\n    set sanitize(sanitize) {\n        this._sanitize = _toOption(sanitize);\n    }\n    constructor(_elementRef, _domSanitizer, config) {\n        super(config);\n        this._elementRef = _elementRef;\n        this._domSanitizer = _domSanitizer;\n    }\n    /**\n     * A angular lifecycle method, Use on init to check if it `content` type and load the element `content` to `value`.\n     * @internal\n     */\n    ngOnInit() {\n        if (this.value === undefined && this._elementRef.nativeElement.innerHTML.trim() !== '') {\n            this.render(this._elementRef.nativeElement.innerHTML);\n        }\n    }\n    /**\n     * A angular lifecycle method, Use to call to render method after changes.\n     * @internal\n     */\n    ngOnChanges() {\n        this.render();\n    }\n    /**\n     * Convert the markdown value of {@link ShowdownComponent#value} to html and set the html result to the element content.\n     *\n     * __Example :__\n     *\n     * ```html\n     * <textarea #textarea (change)=\"showdown.render(textarea.value)\"/># Some Header</textarea>\n     * <showdown #showdown></showdown>\n     * ```\n     * @param value - A markdown value to render (it will override the current value of `ShowdownComponent#value`)\n     */\n    render(value) {\n        if (typeof value === 'string') {\n            this.value = value;\n        }\n        if (typeof this.value === 'string') {\n            let result = this.makeHtml(this.value);\n            if (this._sanitize) {\n                result = this._domSanitizer.sanitize(SecurityContext.HTML, result);\n            }\n            this._elementRef.nativeElement.innerHTML = result;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownComponent, deps: [{ token: i0.ElementRef }, { token: i1.DomSanitizer, optional: true }, { token: ShowdownConfig, optional: true }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.2\", type: ShowdownComponent, selector: \"showdown,[showdown]\", inputs: { backslashEscapesHTMLTags: \"backslashEscapesHTMLTags\", completeHTMLDocument: \"completeHTMLDocument\", disableForced4SpacesIndentedSublists: \"disableForced4SpacesIndentedSublists\", emoji: \"emoji\", encodeEmails: \"encodeEmails\", ghCodeBlocks: \"ghCodeBlocks\", ghCompatibleHeaderId: \"ghCompatibleHeaderId\", ghMentions: \"ghMentions\", ghMentionsLink: \"ghMentionsLink\", headerLevelStart: \"headerLevelStart\", literalMidWordAsterisks: \"literalMidWordAsterisks\", literalMidWordUnderscores: \"literalMidWordUnderscores\", metadata: \"metadata\", noHeaderId: \"noHeaderId\", omitExtraWLInCodeBlocks: \"omitExtraWLInCodeBlocks\", openLinksInNewWindow: \"openLinksInNewWindow\", parseImgDimensions: \"parseImgDimensions\", prefixHeaderId: \"prefixHeaderId\", rawHeaderId: \"rawHeaderId\", rawPrefixHeaderId: \"rawPrefixHeaderId\", requireSpaceBeforeHeadingText: \"requireSpaceBeforeHeadingText\", simpleLineBreaks: \"simpleLineBreaks\", simplifiedAutoLink: \"simplifiedAutoLink\", smartIndentationFix: \"smartIndentationFix\", smoothLivePreview: \"smoothLivePreview\", splitAdjacentBlockquotes: \"splitAdjacentBlockquotes\", strikethrough: \"strikethrough\", tables: \"tables\", tablesHeaderId: \"tablesHeaderId\", tasklists: \"tasklists\", underline: \"underline\", value: \"value\", showdown: \"showdown\", options: \"options\", sanitize: \"sanitize\" }, exportAs: [\"showdown\"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'showdown,[showdown]',\n                    template: '<ng-content></ng-content>',\n                    exportAs: 'showdown',\n                    inputs: OPTIONS_PROPERTIES_KEYS\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.DomSanitizer, decorators: [{\n                    type: Optional\n                }] }, { type: ShowdownConfig, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { value: [{\n                type: Input\n            }], showdown: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], sanitize: [{\n                type: Input\n            }] } });\n// Define options properties setter for angular directive and direct access\nfor (let key of OPTIONS_PROPERTIES_KEYS) {\n    Object.defineProperty(ShowdownComponent.prototype, key, {\n        set(value) {\n            this.setOption(key, _toOption(value));\n        },\n        configurable: true\n    });\n}","originalLength":24722,"removedExports":[],"renderedExports":["ShowdownComponent"],"renderedLength":9922},"/Users/khalil/Desktop/development/ngx-showdown/dist/lib/esm2022/source.directive.mjs":{"code":"/**\n * A angular directive to `ShowdownComponent` for make http request of markdown content.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { HttpClientModule } from '@angular/common/http';\n * import { ShowdownComponent, SourceDirective } from 'ngx-showdown';\n *\n * @NgModule({\n *    declarations: [ ShowdownComponent, SourceDirective ],\n *    imports: [ HttpClientModule ]\n * })\n * export class AppModule {}\n * ```\n *\n * Bind url `src` directive\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *     selector: 'some',\n *     template: '<showdown [src]=\"url\" smartIndentationFix>**Loading...**</showdown>\n * })\n * class SomeComponent {\n *     url: string = 'https://unpkg.com/ngx-showdown/README.md';\n *     // ...\n * }\n * ```\n *\n * Set static url\n * ```html\n * <showdown src=\"README.md\" [options]=\"{noHeaderId: true}\"></showdown>\n * ```\n *\n * Set template reference variable\n * ```html\n * <showdown #source=\"source\" src=\"README.md\"></showdown>\n * ```\n *\n * Listening to `error` events.\n * ```html\n * <showdown #sd src=\"http://url.error\" (error)=\"sd.render('# '+$event.message)\"></showdown>\n * ```\n */\nclass SourceDirective {\n    _showdownComponent;\n    _http;\n    /**\n     * The source url of the markdown content.\n     *\n     * __Example :__\n     *\n     * Set static url to `src` directive.\n     * ```html\n     * <showdown src=\"https://unpkg.com/ngx-showdown/README.md\"></showdown>\n     * ```\n     *\n     * Bind url to `src` directive.\n     * ```html\n     * <input type=\"text\" #url placeholder=\"url\" />\n     * <button (click)=\"src = url.value\">Load</button>\n     * <showdown [src]=\"src\">**Loading...**</showdown>\n     * ```\n     */\n    src;\n    /**\n     * On error occur.\n     *\n     * __Example :__\n     *\n     * ```html\n     * <input type=\"text\" placeholder=\"url\" [(ngModel)]=\"url\"/>\n     * <showdown [src]=\"url\" (error)=\"sd.render('# Error\\n> '+$event.message)\">**Loading...**</showdown>\n     * ```\n     */\n    error = new EventEmitter();\n    constructor(_showdownComponent, _http) {\n        this._showdownComponent = _showdownComponent;\n        this._http = _http;\n    }\n    /**\n     * A angular lifecycle method, Use to call to `load` method on src init/changes\n     * @internal\n     */\n    ngOnChanges() {\n        this.load();\n    }\n    /**\n     * Load the markdown content of {@link SourceDirective#src} url to {@link ShowdownComponent#value}.\n     *\n     * __Example :__\n     *\n     * ```html\n     * <input type=\"text\" #url value=\"source.src\" placeholder=\"Url\" />\n     * <button (click)=\"source.load(url.value)\">Load</button>\n     * <showdown #source=\"source\" src=\"https://unpkg.com/ngx-showdown/README.md\"></showdown>\n     * ```\n     * @param url - A url of markdown content to load (it will override the current url of `SourceDirective#src`)\n     */\n    load(url) {\n        if (url) {\n            this.src = url;\n        }\n        if (this.src) {\n            this\n                ._http\n                .get(this.src, { responseType: 'text' })\n                .subscribe((response) => {\n                this._showdownComponent.render(response);\n            }, (error) => {\n                this.error.emit(error);\n            });\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: SourceDirective, deps: [{ token: ShowdownComponent }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.2\", type: SourceDirective, selector: \"showdown[src],[showdown][src]\", inputs: { src: \"src\" }, outputs: { error: \"error\" }, exportAs: [\"source\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: SourceDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'showdown[src],[showdown][src]',\n                    exportAs: 'source'\n                }]\n        }], ctorParameters: function () { return [{ type: ShowdownComponent }, { type: i2.HttpClient }]; }, propDecorators: { src: [{\n                type: Input\n            }], error: [{\n                type: Output\n            }] } });","originalLength":10932,"removedExports":[],"renderedExports":["SourceDirective"],"renderedLength":4283},"/Users/khalil/Desktop/development/ngx-showdown/dist/lib/esm2022/showdown.pipe.mjs":{"code":"/**\n * A angular pipe to transform `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownPipe } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownPipe ];\n * })\n * export class AppModule {}\n * ```\n *\n * Transform markdown value to html.\n * ```html\n * <input type=\"text\" placeholder=\"Name\" [(ngModel)]=\"name\"/>\n * <div [innerHTML]=\"'**Hello '+(name || 'nobody')+'!**' | showdown\">\n * ```\n *\n * Transform markdown value to html with `options`.\n * ```typescript\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: `<div innerHTML=\"{{ text | showdown: options }}\"></div>`\n * })\n * export class SomeComponent {\n *   text: string = \"__Some Underline__\";\n *   options: Showdown.ShowdownOptions = { underline: true };\n *   // ...\n * }\n * ```\n */\nclass ShowdownPipe extends ShowdownConverter {\n    /**\n     * Transform markdown value to html.\n     *\n     * @param value - The markdown value to transform to html.\n     * @param options - A `Showdown` converter options.\n     * @returns Returns the transform result of `value` to html.\n     */\n    transform(value, options) {\n        this.setOptions(options);\n        return this.makeHtml(value);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownPipe, deps: null, target: i0.ɵɵFactoryTarget.Pipe });\n    static ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownPipe, name: \"showdown\", pure: false });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'showdown',\n                    pure: false\n                }]\n        }] });","originalLength":4999,"removedExports":[],"renderedExports":["ShowdownPipe"],"renderedLength":1883},"/Users/khalil/Desktop/development/ngx-showdown/dist/lib/esm2022/showdown.module.mjs":{"code":"/**\n * @internal\n */\nconst DECLARATIONS = [\n    ShowdownComponent,\n    ShowdownPipe,\n    SourceDirective\n];\n/**\n * ### Example\n *\n * Add `ShowdownModule` to app `imports`.\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownModule } from 'ngx-showdown';\n *\n * @NgModule({\n *   imports: [ ShowdownModule ];\n * })\n * export class AppModule {}\n * ```\n */\nclass ShowdownModule {\n    /**\n     * __Example :__\n     *\n     * Add `ShowdownModule` to app `imports` with config.\n     * ```typescript\n     * import { NgModule } from '@angular/core';\n     * import { ShowdownModule } from 'ngx-showdown';\n     *\n     * @NgModule({\n     *   imports: [ ShowdownModule.forRoot({\n     *     smartIndentationFix: true,\n     *     foo: 'bar',\n     *     flavor: 'github',\n     *     extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]\n     *   }) ];\n     * })\n     * export class AppModule {}\n     * ```\n     * @param config - A root converter config for all converter instances.\n     */\n    static forRoot(config) {\n        return {\n            ngModule: ShowdownModule,\n            providers: [{ provide: ShowdownConfig, useValue: config }]\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownModule, declarations: [ShowdownComponent,\n            ShowdownPipe,\n            SourceDirective], exports: [ShowdownComponent,\n            ShowdownPipe,\n            SourceDirective] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownModule, providers: [ShowdownConverter] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: DECLARATIONS,\n                    providers: [ShowdownConverter],\n                    exports: DECLARATIONS\n                }]\n        }] });","originalLength":6243,"removedExports":[],"renderedExports":["ShowdownModule"],"renderedLength":2170},"/Users/khalil/Desktop/development/ngx-showdown/dist/lib/esm2022/index.mjs":{"code":"","originalLength":959,"removedExports":[],"renderedExports":[],"renderedLength":0},"/Users/khalil/Desktop/development/ngx-showdown/dist/lib/esm2022/ngx-showdown.mjs":{"code":"/**\n * Generated bundle index. Do not edit.\n */","originalLength":463,"removedExports":[],"renderedExports":[],"renderedLength":47}},"referencedFiles":[],"code":"import * as i0 from '@angular/core';\nimport { Injectable, Optional, SecurityContext, Component, Input, EventEmitter, Directive, Output, Pipe, NgModule } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport * as i1 from '@angular/platform-browser';\nimport * as i2 from '@angular/common/http';\n\n/**\n * @internal\n */\nlet { hasOwnProperty: hasOwnProperty$1 } = {};\n/**\n * A config provider\n *\n * ### Example\n *\n * Set custom config provider.\n * ```typescript\n * import { NgModel } from '@angular/core';\n * import { ShowdownModule, ShowdownConfig } from 'ngx-showdown';\n *\n * export class MyShowdownConfig extends ShowdownConfig {\n *   emoji = true;\n *   underscore = false;\n *   flavor = 'github';\n * }\n *\n * @NgModel({\n *   imports: [ ShowdownModule ],\n *   providers: [ {provide: ShowdownConfig, useClass: MyConverterOptions} ]\n * })\n * export class AppModule {}\n * ```\n */\nclass ShowdownConfig {\n    /**\n     * @see https://github.com/showdownjs/showdown/blob/master/README.md#flavors\n     */\n    flavor;\n    constructor(options) {\n        this.merge(options);\n    }\n    /**\n     * Merge options\n     *\n     * @param options - A options object to merge.\n     */\n    merge(options) {\n        for (let key in options) {\n            if (hasOwnProperty$1.call(options, key)) {\n                this[key] = options[key];\n            }\n        }\n    }\n}\n\n/**\n * @internal\n */\nlet { hasOwnProperty } = {};\n/**\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @NgModule({\n *   providers: [ ShowdownConverter ];\n * })\n * export class AppModule {}\n * ```\n *\n * Use the converter instance.\n * ```typescript\n * import { Injectable } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @Injectable()\n * export class SomeService {\n *   constructor(showdownConverter: ShowdownConverter) {\n *     let markdown: string = \"**Some**\";\n *     let html: string = showdownConverter.makeHtml(markdown);\n *     console.log(`some:\\nmarkdown: ${markdown)\\nhtml: ${html}\\n`);\n *   }\n * }\n * ```\n */\nclass ShowdownConverter extends Showdown.Converter {\n    constructor(config) {\n        super(config && { extensions: config.extensions });\n        this.setFlavor((config && config.flavor) || 'vanilla');\n        this.setOptions(config);\n    }\n    /**\n     * Set options to the converter.\n     *\n     * @param options - A options object to set.\n     */\n    setOptions(options) {\n        for (let key in options) {\n            if (hasOwnProperty.call(options, key)) {\n                this.setOption(key, options[key]);\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownConverter, deps: [{ token: ShowdownConfig, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownConverter });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownConverter, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: ShowdownConfig, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * @internal\n */\nconst MAP_OPTION = {\n    '': true,\n    true: true,\n    false: false\n};\n/**\n * @internal\n */\nlet _toOption = (value) => MAP_OPTION.hasOwnProperty(value) ? MAP_OPTION[value] : value;\n/**\n * The options keys for the dynamic properties set.\n * @internal\n */\nconst OPTIONS_PROPERTIES_KEYS = [\n    'backslashEscapesHTMLTags',\n    'completeHTMLDocument',\n    'disableForced4SpacesIndentedSublists',\n    'emoji',\n    'encodeEmails',\n    'ghCodeBlocks',\n    'ghCompatibleHeaderId',\n    'ghMentions',\n    'ghMentionsLink',\n    'headerLevelStart',\n    'literalMidWordAsterisks',\n    'literalMidWordUnderscores',\n    'metadata',\n    'noHeaderId',\n    'omitExtraWLInCodeBlocks',\n    'openLinksInNewWindow',\n    'parseImgDimensions',\n    'prefixHeaderId',\n    'rawHeaderId',\n    'rawPrefixHeaderId',\n    'requireSpaceBeforeHeadingText',\n    'simpleLineBreaks',\n    'simplifiedAutoLink',\n    'smartIndentationFix',\n    'smoothLivePreview',\n    'splitAdjacentBlockquotes',\n    'strikethrough',\n    'tables',\n    'tablesHeaderId',\n    'tasklists',\n    'underline'\n];\n/**\n * A angular component for render `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownComponent } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownComponent ];\n * })\n * export class AppModule {}\n * ```\n *\n * Bind markdown value and options object\n * ```typescript\n * import { Component } from '@angular/core';\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: '<showdown [value]=\"text\" [options]=\"options\"></showdown>'\n * })\n * export class SomeComponent {\n *   text: string = `\n *     # Some header\n *     ---\n *     **Some bold**\n *   `;\n *   options: Showdown.ShowdownOptions = { smartIndentationFix: true };\n *   // ...\n * }\n * ```\n * Bind single option (it have properties for all showdown options).\n * ```html\n * <showdown emoji=\"true\"  noHeaderId># Some text :+1:</showdown>\n * ```\n *\n * Set static markdown value.\n * ```html\n * <showdown value=\"___Some static value___\" underline></showdown>\n * ```\n *\n * Use as directive on anther element.\n * ```html\n * <div showdown=\"# Div Element\" headerLevelStart=\"2\"></div>\n * ```\n *\n * Static markdown value in the element content.\n * ```html\n * <div>\n *    <showdown smartIndentationFix>\n *       # List:\n *       * a\n *            * A\n *       * b\n *    </showdown>\n * </div>\n * ```\n *\n * Set template reference variable.\n * ```html\n * <showdown #sd></showdown>\n * ```\n * Or\n * ```html\n * <div showdown #sd=\"showdown\"></div>\n * ```\n */\nclass ShowdownComponent extends ShowdownConverter {\n    _elementRef;\n    _domSanitizer;\n    /**\n     * The input markdown value.\n     *\n     * __Example :__\n     *\n     * Set some static markdown value.\n     * ```html\n     * <showdown value=\"**Some bold value**\"></showdown>\n     * ```\n     *\n     * Bind property with markdown value.\n     * ```html\n     * <textarea [(ngModel)]=\"text\"></textarea>\n     * <showdown [value]=\"text\"></showdown>\n     * ```\n     */\n    value;\n    /**\n     * Input alias to `value`.\n     *\n     * __Example :__\n     *\n     * ```html\n     * <div [showdown]=\"# Some Header\"></div>\n     * ```\n     *\n     * Equivalent to\n     * ```html\n     * <showdown [value]=\"# Some Header\"></showdown>\n     * ```\n     */\n    set showdown(value) {\n        this.value = value;\n    }\n    /**\n     * The showdown options of the converter.\n     *\n     * __Example :__\n     *\n     * Bind options\n     * ```typescript\n     * import { Component } from '@angular/core';\n     * import * as Showdown from 'showdown';\n     *\n     * @Component({\n     *   selector: `some`,\n     *   template: `<showdown [options]=\"options\"># Some Header<showdown>`\n     * })\n     * export class SomeComponent {\n     *   options: Showdown.ShowdownOptions = {headerLevelStart: 3};\n     *   // ...\n     * }\n     * ```\n     * Or\n     * ```html\n     * <showdown [options]=\"{smartIndentationFix: true}\"> # Indentation Fix<showdown>\n     * ```\n     */\n    get options() {\n        return this.getOptions();\n    }\n    set options(options) {\n        this.setOptions(options);\n    }\n    _sanitize;\n    /**\n     * Enables html sanitize, it will sanitize the converter html output by [`DomSanitizer`](https://angular.io/api/platform-browser/DomSanitizer#sanitize).\n     *\n     * __Example :__\n     *\n     * ```typescript\n     * import { Component } from '@angular/core';\n     *\n     * @Component({\n     *   selector: 'some',\n     *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n     *   template: `\n     *     <h3>Input</h3>\n     *     <textarea class=\"box\" [(ngModel)]=\"text\"></textarea>\n     *     <input type=\"checkbox\" [(ngModel)]=\"sanitize\"/> <b>Sanitize</b>\n     *     <h3>Markdown</h3>\n     *     <pre class=\"box\"><code>{{ text }}</code></pre>\n     *     <h3>Preview</h3>\n     *     <div class=\"box\">\n     *       <showdown #sd [value]=\"text\" [sanitize]=\"sanitize\"></showdown>\n     *     </div>\n     *   `;\n     * })\n     * export class SomeComponent {\n     *    text: string = `# A cool link\n     * <a href=\"javascript:alert('Hello!')\">click me</a>`;\n     * }\n     * ```\n     */\n    set sanitize(sanitize) {\n        this._sanitize = _toOption(sanitize);\n    }\n    constructor(_elementRef, _domSanitizer, config) {\n        super(config);\n        this._elementRef = _elementRef;\n        this._domSanitizer = _domSanitizer;\n    }\n    /**\n     * A angular lifecycle method, Use on init to check if it `content` type and load the element `content` to `value`.\n     * @internal\n     */\n    ngOnInit() {\n        if (this.value === undefined && this._elementRef.nativeElement.innerHTML.trim() !== '') {\n            this.render(this._elementRef.nativeElement.innerHTML);\n        }\n    }\n    /**\n     * A angular lifecycle method, Use to call to render method after changes.\n     * @internal\n     */\n    ngOnChanges() {\n        this.render();\n    }\n    /**\n     * Convert the markdown value of {@link ShowdownComponent#value} to html and set the html result to the element content.\n     *\n     * __Example :__\n     *\n     * ```html\n     * <textarea #textarea (change)=\"showdown.render(textarea.value)\"/># Some Header</textarea>\n     * <showdown #showdown></showdown>\n     * ```\n     * @param value - A markdown value to render (it will override the current value of `ShowdownComponent#value`)\n     */\n    render(value) {\n        if (typeof value === 'string') {\n            this.value = value;\n        }\n        if (typeof this.value === 'string') {\n            let result = this.makeHtml(this.value);\n            if (this._sanitize) {\n                result = this._domSanitizer.sanitize(SecurityContext.HTML, result);\n            }\n            this._elementRef.nativeElement.innerHTML = result;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownComponent, deps: [{ token: i0.ElementRef }, { token: i1.DomSanitizer, optional: true }, { token: ShowdownConfig, optional: true }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.2\", type: ShowdownComponent, selector: \"showdown,[showdown]\", inputs: { backslashEscapesHTMLTags: \"backslashEscapesHTMLTags\", completeHTMLDocument: \"completeHTMLDocument\", disableForced4SpacesIndentedSublists: \"disableForced4SpacesIndentedSublists\", emoji: \"emoji\", encodeEmails: \"encodeEmails\", ghCodeBlocks: \"ghCodeBlocks\", ghCompatibleHeaderId: \"ghCompatibleHeaderId\", ghMentions: \"ghMentions\", ghMentionsLink: \"ghMentionsLink\", headerLevelStart: \"headerLevelStart\", literalMidWordAsterisks: \"literalMidWordAsterisks\", literalMidWordUnderscores: \"literalMidWordUnderscores\", metadata: \"metadata\", noHeaderId: \"noHeaderId\", omitExtraWLInCodeBlocks: \"omitExtraWLInCodeBlocks\", openLinksInNewWindow: \"openLinksInNewWindow\", parseImgDimensions: \"parseImgDimensions\", prefixHeaderId: \"prefixHeaderId\", rawHeaderId: \"rawHeaderId\", rawPrefixHeaderId: \"rawPrefixHeaderId\", requireSpaceBeforeHeadingText: \"requireSpaceBeforeHeadingText\", simpleLineBreaks: \"simpleLineBreaks\", simplifiedAutoLink: \"simplifiedAutoLink\", smartIndentationFix: \"smartIndentationFix\", smoothLivePreview: \"smoothLivePreview\", splitAdjacentBlockquotes: \"splitAdjacentBlockquotes\", strikethrough: \"strikethrough\", tables: \"tables\", tablesHeaderId: \"tablesHeaderId\", tasklists: \"tasklists\", underline: \"underline\", value: \"value\", showdown: \"showdown\", options: \"options\", sanitize: \"sanitize\" }, exportAs: [\"showdown\"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'showdown,[showdown]',\n                    template: '<ng-content></ng-content>',\n                    exportAs: 'showdown',\n                    inputs: OPTIONS_PROPERTIES_KEYS\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.DomSanitizer, decorators: [{\n                    type: Optional\n                }] }, { type: ShowdownConfig, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { value: [{\n                type: Input\n            }], showdown: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], sanitize: [{\n                type: Input\n            }] } });\n// Define options properties setter for angular directive and direct access\nfor (let key of OPTIONS_PROPERTIES_KEYS) {\n    Object.defineProperty(ShowdownComponent.prototype, key, {\n        set(value) {\n            this.setOption(key, _toOption(value));\n        },\n        configurable: true\n    });\n}\n\n/**\n * A angular directive to `ShowdownComponent` for make http request of markdown content.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { HttpClientModule } from '@angular/common/http';\n * import { ShowdownComponent, SourceDirective } from 'ngx-showdown';\n *\n * @NgModule({\n *    declarations: [ ShowdownComponent, SourceDirective ],\n *    imports: [ HttpClientModule ]\n * })\n * export class AppModule {}\n * ```\n *\n * Bind url `src` directive\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *     selector: 'some',\n *     template: '<showdown [src]=\"url\" smartIndentationFix>**Loading...**</showdown>\n * })\n * class SomeComponent {\n *     url: string = 'https://unpkg.com/ngx-showdown/README.md';\n *     // ...\n * }\n * ```\n *\n * Set static url\n * ```html\n * <showdown src=\"README.md\" [options]=\"{noHeaderId: true}\"></showdown>\n * ```\n *\n * Set template reference variable\n * ```html\n * <showdown #source=\"source\" src=\"README.md\"></showdown>\n * ```\n *\n * Listening to `error` events.\n * ```html\n * <showdown #sd src=\"http://url.error\" (error)=\"sd.render('# '+$event.message)\"></showdown>\n * ```\n */\nclass SourceDirective {\n    _showdownComponent;\n    _http;\n    /**\n     * The source url of the markdown content.\n     *\n     * __Example :__\n     *\n     * Set static url to `src` directive.\n     * ```html\n     * <showdown src=\"https://unpkg.com/ngx-showdown/README.md\"></showdown>\n     * ```\n     *\n     * Bind url to `src` directive.\n     * ```html\n     * <input type=\"text\" #url placeholder=\"url\" />\n     * <button (click)=\"src = url.value\">Load</button>\n     * <showdown [src]=\"src\">**Loading...**</showdown>\n     * ```\n     */\n    src;\n    /**\n     * On error occur.\n     *\n     * __Example :__\n     *\n     * ```html\n     * <input type=\"text\" placeholder=\"url\" [(ngModel)]=\"url\"/>\n     * <showdown [src]=\"url\" (error)=\"sd.render('# Error\\n> '+$event.message)\">**Loading...**</showdown>\n     * ```\n     */\n    error = new EventEmitter();\n    constructor(_showdownComponent, _http) {\n        this._showdownComponent = _showdownComponent;\n        this._http = _http;\n    }\n    /**\n     * A angular lifecycle method, Use to call to `load` method on src init/changes\n     * @internal\n     */\n    ngOnChanges() {\n        this.load();\n    }\n    /**\n     * Load the markdown content of {@link SourceDirective#src} url to {@link ShowdownComponent#value}.\n     *\n     * __Example :__\n     *\n     * ```html\n     * <input type=\"text\" #url value=\"source.src\" placeholder=\"Url\" />\n     * <button (click)=\"source.load(url.value)\">Load</button>\n     * <showdown #source=\"source\" src=\"https://unpkg.com/ngx-showdown/README.md\"></showdown>\n     * ```\n     * @param url - A url of markdown content to load (it will override the current url of `SourceDirective#src`)\n     */\n    load(url) {\n        if (url) {\n            this.src = url;\n        }\n        if (this.src) {\n            this\n                ._http\n                .get(this.src, { responseType: 'text' })\n                .subscribe((response) => {\n                this._showdownComponent.render(response);\n            }, (error) => {\n                this.error.emit(error);\n            });\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: SourceDirective, deps: [{ token: ShowdownComponent }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.2\", type: SourceDirective, selector: \"showdown[src],[showdown][src]\", inputs: { src: \"src\" }, outputs: { error: \"error\" }, exportAs: [\"source\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: SourceDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'showdown[src],[showdown][src]',\n                    exportAs: 'source'\n                }]\n        }], ctorParameters: function () { return [{ type: ShowdownComponent }, { type: i2.HttpClient }]; }, propDecorators: { src: [{\n                type: Input\n            }], error: [{\n                type: Output\n            }] } });\n\n/**\n * A angular pipe to transform `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownPipe } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownPipe ];\n * })\n * export class AppModule {}\n * ```\n *\n * Transform markdown value to html.\n * ```html\n * <input type=\"text\" placeholder=\"Name\" [(ngModel)]=\"name\"/>\n * <div [innerHTML]=\"'**Hello '+(name || 'nobody')+'!**' | showdown\">\n * ```\n *\n * Transform markdown value to html with `options`.\n * ```typescript\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: `<div innerHTML=\"{{ text | showdown: options }}\"></div>`\n * })\n * export class SomeComponent {\n *   text: string = \"__Some Underline__\";\n *   options: Showdown.ShowdownOptions = { underline: true };\n *   // ...\n * }\n * ```\n */\nclass ShowdownPipe extends ShowdownConverter {\n    /**\n     * Transform markdown value to html.\n     *\n     * @param value - The markdown value to transform to html.\n     * @param options - A `Showdown` converter options.\n     * @returns Returns the transform result of `value` to html.\n     */\n    transform(value, options) {\n        this.setOptions(options);\n        return this.makeHtml(value);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownPipe, deps: null, target: i0.ɵɵFactoryTarget.Pipe });\n    static ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownPipe, name: \"showdown\", pure: false });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'showdown',\n                    pure: false\n                }]\n        }] });\n\n/**\n * @internal\n */\nconst DECLARATIONS = [\n    ShowdownComponent,\n    ShowdownPipe,\n    SourceDirective\n];\n/**\n * ### Example\n *\n * Add `ShowdownModule` to app `imports`.\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownModule } from 'ngx-showdown';\n *\n * @NgModule({\n *   imports: [ ShowdownModule ];\n * })\n * export class AppModule {}\n * ```\n */\nclass ShowdownModule {\n    /**\n     * __Example :__\n     *\n     * Add `ShowdownModule` to app `imports` with config.\n     * ```typescript\n     * import { NgModule } from '@angular/core';\n     * import { ShowdownModule } from 'ngx-showdown';\n     *\n     * @NgModule({\n     *   imports: [ ShowdownModule.forRoot({\n     *     smartIndentationFix: true,\n     *     foo: 'bar',\n     *     flavor: 'github',\n     *     extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]\n     *   }) ];\n     * })\n     * export class AppModule {}\n     * ```\n     * @param config - A root converter config for all converter instances.\n     */\n    static forRoot(config) {\n        return {\n            ngModule: ShowdownModule,\n            providers: [{ provide: ShowdownConfig, useValue: config }]\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownModule, declarations: [ShowdownComponent,\n            ShowdownPipe,\n            SourceDirective], exports: [ShowdownComponent,\n            ShowdownPipe,\n            SourceDirective] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownModule, providers: [ShowdownConverter] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.2\", ngImport: i0, type: ShowdownModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: DECLARATIONS,\n                    providers: [ShowdownConverter],\n                    exports: DECLARATIONS\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ShowdownComponent, ShowdownConfig, ShowdownConverter, ShowdownModule, ShowdownPipe, SourceDirective };\n//# sourceMappingURL=ngx-showdown.mjs.map\n","map":null,"preliminaryFileName":"ngx-showdown.mjs"},{"fileName":"ngx-showdown.mjs.map","needsCodeReference":false,"source":"{\"version\":3,\"file\":\"ngx-showdown.mjs\",\"sources\":[\"../../../src/showdown-config.provider.ts\",\"../../../src/showdown-converter.provider.ts\",\"../../../src/showdown.component.ts\",\"../../../src/source.directive.ts\",\"../../../src/showdown.pipe.ts\",\"../../../src/showdown.module.ts\",\"../../../src/ngx-showdown.ts\"],\"sourcesContent\":[\"import * as Showdown from 'showdown';\\n\\n/**\\n * @internal\\n */\\nlet {hasOwnProperty} = {};\\n\\nexport interface ShowdownConfig extends Showdown.ConverterOptions {\\n}\\n\\n/**\\n * A config provider\\n *\\n * ### Example\\n *\\n * Set custom config provider.\\n * ```typescript\\n * import { NgModel } from '@angular/core';\\n * import { ShowdownModule, ShowdownConfig } from 'ngx-showdown';\\n *\\n * export class MyShowdownConfig extends ShowdownConfig {\\n *   emoji = true;\\n *   underscore = false;\\n *   flavor = 'github';\\n * }\\n *\\n * @NgModel({\\n *   imports: [ ShowdownModule ],\\n *   providers: [ {provide: ShowdownConfig, useClass: MyConverterOptions} ]\\n * })\\n * export class AppModule {}\\n * ```\\n */\\nexport class ShowdownConfig implements Showdown.ConverterOptions {\\n\\n  /**\\n   * @see https://github.com/showdownjs/showdown/blob/master/README.md#flavors\\n   */\\n  flavor?: Showdown.Flavor;\\n\\n  constructor(options?: ShowdownConfig | Showdown.ConverterOptions) {\\n    this.merge(options);\\n  }\\n\\n  /**\\n   * Merge options\\n   *\\n   * @param options - A options object to merge.\\n   */\\n  public merge?(options: ShowdownConfig | Showdown.ConverterOptions) {\\n    for (let key in options) {\\n      if (hasOwnProperty.call(options, key)) {\\n        this[key] = options[key];\\n      }\\n    }\\n  }\\n\\n}\\n\",\"import { Injectable, Optional } from '@angular/core';\\nimport * as Showdown from 'showdown';\\nimport { ShowdownConfig } from './showdown-config.provider';\\n\\n/**\\n * @internal\\n */\\nlet {hasOwnProperty} = {};\\n\\n/**\\n * ### Example\\n *\\n * Setup as standalone\\n * ```typescript\\n * import { NgModule } from '@angular/core';\\n * import { ShowdownConverter } from 'ngx-showdown';\\n *\\n * @NgModule({\\n *   providers: [ ShowdownConverter ];\\n * })\\n * export class AppModule {}\\n * ```\\n *\\n * Use the converter instance.\\n * ```typescript\\n * import { Injectable } from '@angular/core';\\n * import { ShowdownConverter } from 'ngx-showdown';\\n *\\n * @Injectable()\\n * export class SomeService {\\n *   constructor(showdownConverter: ShowdownConverter) {\\n *     let markdown: string = \\\"**Some**\\\";\\n *     let html: string = showdownConverter.makeHtml(markdown);\\n *     console.log(`some:\\\\nmarkdown: ${markdown)\\\\nhtml: ${html}\\\\n`);\\n *   }\\n * }\\n * ```\\n */\\n@Injectable()\\nexport class ShowdownConverter extends Showdown.Converter {\\n\\n  constructor(@Optional() config?: ShowdownConfig) {\\n    super(config && {extensions: config.extensions});\\n    this.setFlavor((config && config.flavor) || 'vanilla');\\n    this.setOptions(config);\\n  }\\n\\n  /**\\n   * Set options to the converter.\\n   *\\n   * @param options - A options object to set.\\n   */\\n  public setOptions(options: Showdown.ShowdownOptions): void {\\n    for (let key in options) {\\n      if (hasOwnProperty.call(options, key)) {\\n        this.setOption(key, options[key]);\\n      }\\n    }\\n  }\\n\\n}\\n\",\"import { Component, ElementRef, Input, OnChanges, OnInit, Optional, SecurityContext } from '@angular/core';\\nimport { DomSanitizer } from '@angular/platform-browser';\\nimport * as Showdown from 'showdown';\\nimport { ShowdownConfig } from './showdown-config.provider';\\nimport { ShowdownConverter } from './showdown-converter.provider';\\n\\n/**\\n * @internal\\n */\\nconst MAP_OPTION = {\\n  '': true,\\n  true: true,\\n  false: false\\n};\\n\\n/**\\n * @internal\\n */\\nlet _toOption = (value: any) => MAP_OPTION.hasOwnProperty(value) ? MAP_OPTION[value] : value;\\n\\n/**\\n * The options keys for the dynamic properties set.\\n * @internal\\n */\\nconst OPTIONS_PROPERTIES_KEYS: string[] = [\\n  'backslashEscapesHTMLTags',\\n  'completeHTMLDocument',\\n  'disableForced4SpacesIndentedSublists',\\n  'emoji',\\n  'encodeEmails',\\n  'ghCodeBlocks',\\n  'ghCompatibleHeaderId',\\n  'ghMentions',\\n  'ghMentionsLink',\\n  'headerLevelStart',\\n  'literalMidWordAsterisks',\\n  'literalMidWordUnderscores',\\n  'metadata',\\n  'noHeaderId',\\n  'omitExtraWLInCodeBlocks',\\n  'openLinksInNewWindow',\\n  'parseImgDimensions',\\n  'prefixHeaderId',\\n  'rawHeaderId',\\n  'rawPrefixHeaderId',\\n  'requireSpaceBeforeHeadingText',\\n  'simpleLineBreaks',\\n  'simplifiedAutoLink',\\n  'smartIndentationFix',\\n  'smoothLivePreview',\\n  'splitAdjacentBlockquotes',\\n  'strikethrough',\\n  'tables',\\n  'tablesHeaderId',\\n  'tasklists',\\n  'underline'\\n];\\n\\n// For the options setter properties that dynamic definition (the code after the class)\\nexport interface ShowdownComponent extends Showdown.ShowdownOptions {\\n}\\n\\n/**\\n * A angular component for render `Markdown` to `HTML`.\\n *\\n * ### Example\\n *\\n * Setup as standalone\\n * ```typescript\\n * import { NgModule } from '@angular/core';\\n * import { ShowdownComponent } from 'ngx-showdown';\\n *\\n * @NgModule({\\n *   declarations: [ ShowdownComponent ];\\n * })\\n * export class AppModule {}\\n * ```\\n *\\n * Bind markdown value and options object\\n * ```typescript\\n * import { Component } from '@angular/core';\\n * import * as Showdown from 'showdown';\\n *\\n * @Component({\\n *   selector: 'some',\\n *   template: '<showdown [value]=\\\"text\\\" [options]=\\\"options\\\"></showdown>'\\n * })\\n * export class SomeComponent {\\n *   text: string = `\\n *     # Some header\\n *     ---\\n *     **Some bold**\\n *   `;\\n *   options: Showdown.ShowdownOptions = { smartIndentationFix: true };\\n *   // ...\\n * }\\n * ```\\n * Bind single option (it have properties for all showdown options).\\n * ```html\\n * <showdown emoji=\\\"true\\\"  noHeaderId># Some text :+1:</showdown>\\n * ```\\n *\\n * Set static markdown value.\\n * ```html\\n * <showdown value=\\\"___Some static value___\\\" underline></showdown>\\n * ```\\n *\\n * Use as directive on anther element.\\n * ```html\\n * <div showdown=\\\"# Div Element\\\" headerLevelStart=\\\"2\\\"></div>\\n * ```\\n *\\n * Static markdown value in the element content.\\n * ```html\\n * <div>\\n *    <showdown smartIndentationFix>\\n *       # List:\\n *       * a\\n *            * A\\n *       * b\\n *    </showdown>\\n * </div>\\n * ```\\n *\\n * Set template reference variable.\\n * ```html\\n * <showdown #sd></showdown>\\n * ```\\n * Or\\n * ```html\\n * <div showdown #sd=\\\"showdown\\\"></div>\\n * ```\\n */\\n@Component({\\n  selector: 'showdown,[showdown]',\\n  template: '<ng-content></ng-content>',\\n  exportAs: 'showdown',\\n  inputs: OPTIONS_PROPERTIES_KEYS\\n})\\nexport class ShowdownComponent extends ShowdownConverter implements OnInit, OnChanges, Showdown.ShowdownOptions {\\n\\n  /**\\n   * The input markdown value.\\n   *\\n   * __Example :__\\n   *\\n   * Set some static markdown value.\\n   * ```html\\n   * <showdown value=\\\"**Some bold value**\\\"></showdown>\\n   * ```\\n   *\\n   * Bind property with markdown value.\\n   * ```html\\n   * <textarea [(ngModel)]=\\\"text\\\"></textarea>\\n   * <showdown [value]=\\\"text\\\"></showdown>\\n   * ```\\n   */\\n  @Input() value: string;\\n\\n  /**\\n   * Input alias to `value`.\\n   *\\n   * __Example :__\\n   *\\n   * ```html\\n   * <div [showdown]=\\\"# Some Header\\\"></div>\\n   * ```\\n   *\\n   * Equivalent to\\n   * ```html\\n   * <showdown [value]=\\\"# Some Header\\\"></showdown>\\n   * ```\\n   */\\n  @Input() set showdown(value: string) {\\n    this.value = value;\\n  }\\n\\n  /**\\n   * The showdown options of the converter.\\n   *\\n   * __Example :__\\n   *\\n   * Bind options\\n   * ```typescript\\n   * import { Component } from '@angular/core';\\n   * import * as Showdown from 'showdown';\\n   *\\n   * @Component({\\n   *   selector: `some`,\\n   *   template: `<showdown [options]=\\\"options\\\"># Some Header<showdown>`\\n   * })\\n   * export class SomeComponent {\\n   *   options: Showdown.ShowdownOptions = {headerLevelStart: 3};\\n   *   // ...\\n   * }\\n   * ```\\n   * Or\\n   * ```html\\n   * <showdown [options]=\\\"{smartIndentationFix: true}\\\"> # Indentation Fix<showdown>\\n   * ```\\n   */\\n  @Input()\\n  get options(): Showdown.ShowdownOptions {\\n    return this.getOptions();\\n  }\\n\\n  set options(options: Showdown.ShowdownOptions) {\\n    this.setOptions(options);\\n  }\\n\\n  private _sanitize: boolean;\\n\\n  /**\\n   * Enables html sanitize, it will sanitize the converter html output by [`DomSanitizer`](https://angular.io/api/platform-browser/DomSanitizer#sanitize).\\n   *\\n   * __Example :__\\n   *\\n   * ```typescript\\n   * import { Component } from '@angular/core';\\n   *\\n   * @Component({\\n   *   selector: 'some',\\n   *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\\n   *   template: `\\n   *     <h3>Input</h3>\\n   *     <textarea class=\\\"box\\\" [(ngModel)]=\\\"text\\\"></textarea>\\n   *     <input type=\\\"checkbox\\\" [(ngModel)]=\\\"sanitize\\\"/> <b>Sanitize</b>\\n   *     <h3>Markdown</h3>\\n   *     <pre class=\\\"box\\\"><code>{{ text }}</code></pre>\\n   *     <h3>Preview</h3>\\n   *     <div class=\\\"box\\\">\\n   *       <showdown #sd [value]=\\\"text\\\" [sanitize]=\\\"sanitize\\\"></showdown>\\n   *     </div>\\n   *   `;\\n   * })\\n   * export class SomeComponent {\\n   *    text: string = `# A cool link\\n   * <a href=\\\"javascript:alert('Hello!')\\\">click me</a>`;\\n   * }\\n   * ```\\n   */\\n  @Input()\\n  set sanitize(sanitize: boolean) {\\n    this._sanitize = _toOption(sanitize);\\n  }\\n\\n  constructor(private _elementRef: ElementRef, @Optional() private _domSanitizer?: DomSanitizer, @Optional() config?: ShowdownConfig) {\\n    super(config);\\n  }\\n\\n  /**\\n   * A angular lifecycle method, Use on init to check if it `content` type and load the element `content` to `value`.\\n   * @internal\\n   */\\n  ngOnInit(): void {\\n    if (this.value === undefined && this._elementRef.nativeElement.innerHTML.trim() !== '') {\\n      this.render(this._elementRef.nativeElement.innerHTML);\\n    }\\n  }\\n\\n  /**\\n   * A angular lifecycle method, Use to call to render method after changes.\\n   * @internal\\n   */\\n  ngOnChanges(): void {\\n    this.render();\\n  }\\n\\n  /**\\n   * Convert the markdown value of {@link ShowdownComponent#value} to html and set the html result to the element content.\\n   *\\n   * __Example :__\\n   *\\n   * ```html\\n   * <textarea #textarea (change)=\\\"showdown.render(textarea.value)\\\"/># Some Header</textarea>\\n   * <showdown #showdown></showdown>\\n   * ```\\n   * @param value - A markdown value to render (it will override the current value of `ShowdownComponent#value`)\\n   */\\n  public render(value?: string): void {\\n    if (typeof value === 'string') {\\n      this.value = value;\\n    }\\n\\n    if (typeof this.value === 'string') {\\n      let result = this.makeHtml(this.value);\\n\\n      if (this._sanitize) {\\n        result = this._domSanitizer.sanitize(SecurityContext.HTML, result);\\n      }\\n\\n      this._elementRef.nativeElement.innerHTML = result;\\n    }\\n  }\\n\\n}\\n\\n// Define options properties setter for angular directive and direct access\\nfor (let key of OPTIONS_PROPERTIES_KEYS) {\\n  Object.defineProperty(ShowdownComponent.prototype, key, {\\n    set(value: any): void {\\n      this.setOption(key, _toOption(value));\\n    },\\n    configurable: true\\n  });\\n}\\n\",\"import { HttpClient, HttpErrorResponse } from '@angular/common/http';\\nimport { Directive, EventEmitter, Input, OnChanges, Output } from '@angular/core';\\nimport { ShowdownComponent } from './showdown.component';\\n\\n/**\\n * A angular directive to `ShowdownComponent` for make http request of markdown content.\\n *\\n * ### Example\\n *\\n * Setup as standalone\\n * ```typescript\\n * import { NgModule } from '@angular/core';\\n * import { HttpClientModule } from '@angular/common/http';\\n * import { ShowdownComponent, SourceDirective } from 'ngx-showdown';\\n *\\n * @NgModule({\\n *    declarations: [ ShowdownComponent, SourceDirective ],\\n *    imports: [ HttpClientModule ]\\n * })\\n * export class AppModule {}\\n * ```\\n *\\n * Bind url `src` directive\\n * ```typescript\\n * import { Component } from '@angular/core';\\n *\\n * @Component({\\n *     selector: 'some',\\n *     template: '<showdown [src]=\\\"url\\\" smartIndentationFix>**Loading...**</showdown>\\n * })\\n * class SomeComponent {\\n *     url: string = 'https://unpkg.com/ngx-showdown/README.md';\\n *     // ...\\n * }\\n * ```\\n *\\n * Set static url\\n * ```html\\n * <showdown src=\\\"README.md\\\" [options]=\\\"{noHeaderId: true}\\\"></showdown>\\n * ```\\n *\\n * Set template reference variable\\n * ```html\\n * <showdown #source=\\\"source\\\" src=\\\"README.md\\\"></showdown>\\n * ```\\n *\\n * Listening to `error` events.\\n * ```html\\n * <showdown #sd src=\\\"http://url.error\\\" (error)=\\\"sd.render('# '+$event.message)\\\"></showdown>\\n * ```\\n */\\n@Directive({\\n  selector: 'showdown[src],[showdown][src]',\\n  exportAs: 'source'\\n})\\nexport class SourceDirective implements OnChanges {\\n\\n  /**\\n   * The source url of the markdown content.\\n   *\\n   * __Example :__\\n   *\\n   * Set static url to `src` directive.\\n   * ```html\\n   * <showdown src=\\\"https://unpkg.com/ngx-showdown/README.md\\\"></showdown>\\n   * ```\\n   *\\n   * Bind url to `src` directive.\\n   * ```html\\n   * <input type=\\\"text\\\" #url placeholder=\\\"url\\\" />\\n   * <button (click)=\\\"src = url.value\\\">Load</button>\\n   * <showdown [src]=\\\"src\\\">**Loading...**</showdown>\\n   * ```\\n   */\\n  @Input() src: string;\\n\\n  /**\\n   * On error occur.\\n   *\\n   * __Example :__\\n   *\\n   * ```html\\n   * <input type=\\\"text\\\" placeholder=\\\"url\\\" [(ngModel)]=\\\"url\\\"/>\\n   * <showdown [src]=\\\"url\\\" (error)=\\\"sd.render('# Error\\\\n> '+$event.message)\\\">**Loading...**</showdown>\\n   * ```\\n   */\\n  @Output() error: EventEmitter<HttpErrorResponse> = new EventEmitter();\\n\\n  constructor(private _showdownComponent: ShowdownComponent, private _http: HttpClient) {\\n  }\\n\\n  /**\\n   * A angular lifecycle method, Use to call to `load` method on src init/changes\\n   * @internal\\n   */\\n  ngOnChanges(): void {\\n    this.load();\\n  }\\n\\n  /**\\n   * Load the markdown content of {@link SourceDirective#src} url to {@link ShowdownComponent#value}.\\n   *\\n   * __Example :__\\n   *\\n   * ```html\\n   * <input type=\\\"text\\\" #url value=\\\"source.src\\\" placeholder=\\\"Url\\\" />\\n   * <button (click)=\\\"source.load(url.value)\\\">Load</button>\\n   * <showdown #source=\\\"source\\\" src=\\\"https://unpkg.com/ngx-showdown/README.md\\\"></showdown>\\n   * ```\\n   * @param url - A url of markdown content to load (it will override the current url of `SourceDirective#src`)\\n   */\\n  public load(url?: string): void {\\n    if (url) {\\n      this.src = url;\\n    }\\n\\n    if (this.src) {\\n      this\\n        ._http\\n        .get(this.src, {responseType: 'text'})\\n        .subscribe((response: string) => {\\n          this._showdownComponent.render(response);\\n        }, (error: HttpErrorResponse) => {\\n          this.error.emit(error);\\n        });\\n    }\\n  }\\n\\n}\\n\",\"import { Pipe, PipeTransform } from '@angular/core';\\nimport * as Showdown from 'showdown';\\nimport { ShowdownConverter } from './showdown-converter.provider';\\n\\n/**\\n * A angular pipe to transform `Markdown` to `HTML`.\\n *\\n * ### Example\\n *\\n * Setup as standalone\\n * ```typescript\\n * import { NgModule } from '@angular/core';\\n * import { ShowdownPipe } from 'ngx-showdown';\\n *\\n * @NgModule({\\n *   declarations: [ ShowdownPipe ];\\n * })\\n * export class AppModule {}\\n * ```\\n *\\n * Transform markdown value to html.\\n * ```html\\n * <input type=\\\"text\\\" placeholder=\\\"Name\\\" [(ngModel)]=\\\"name\\\"/>\\n * <div [innerHTML]=\\\"'**Hello '+(name || 'nobody')+'!**' | showdown\\\">\\n * ```\\n *\\n * Transform markdown value to html with `options`.\\n * ```typescript\\n * import * as Showdown from 'showdown';\\n *\\n * @Component({\\n *   selector: 'some',\\n *   template: `<div innerHTML=\\\"{{ text | showdown: options }}\\\"></div>`\\n * })\\n * export class SomeComponent {\\n *   text: string = \\\"__Some Underline__\\\";\\n *   options: Showdown.ShowdownOptions = { underline: true };\\n *   // ...\\n * }\\n * ```\\n */\\n@Pipe({\\n  name: 'showdown',\\n  pure: false\\n})\\nexport class ShowdownPipe extends ShowdownConverter implements PipeTransform {\\n\\n  /**\\n   * Transform markdown value to html.\\n   *\\n   * @param value - The markdown value to transform to html.\\n   * @param options - A `Showdown` converter options.\\n   * @returns Returns the transform result of `value` to html.\\n   */\\n  transform(value: string, options?: Showdown.ShowdownOptions): string {\\n    this.setOptions(options);\\n    return this.makeHtml(value);\\n  }\\n\\n}\\n\",\"import { ModuleWithProviders, NgModule } from '@angular/core';\\nimport * as Showdown from 'showdown';\\nimport { ShowdownConfig } from './showdown-config.provider';\\nimport { ShowdownConverter } from './showdown-converter.provider';\\nimport { ShowdownComponent } from './showdown.component';\\nimport { ShowdownPipe } from './showdown.pipe';\\nimport { SourceDirective } from './source.directive';\\n\\n/**\\n * @internal\\n */\\nconst DECLARATIONS = [\\n  ShowdownComponent,\\n  ShowdownPipe,\\n  SourceDirective\\n];\\n\\n/**\\n * ### Example\\n *\\n * Add `ShowdownModule` to app `imports`.\\n * ```typescript\\n * import { NgModule } from '@angular/core';\\n * import { ShowdownModule } from 'ngx-showdown';\\n *\\n * @NgModule({\\n *   imports: [ ShowdownModule ];\\n * })\\n * export class AppModule {}\\n * ```\\n */\\n@NgModule({\\n  declarations: DECLARATIONS,\\n  providers: [ShowdownConverter],\\n  exports: DECLARATIONS\\n})\\nexport class ShowdownModule {\\n\\n  /**\\n   * __Example :__\\n   *\\n   * Add `ShowdownModule` to app `imports` with config.\\n   * ```typescript\\n   * import { NgModule } from '@angular/core';\\n   * import { ShowdownModule } from 'ngx-showdown';\\n   *\\n   * @NgModule({\\n   *   imports: [ ShowdownModule.forRoot({\\n   *     smartIndentationFix: true,\\n   *     foo: 'bar',\\n   *     flavor: 'github',\\n   *     extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]\\n   *   }) ];\\n   * })\\n   * export class AppModule {}\\n   * ```\\n   * @param config - A root converter config for all converter instances.\\n   */\\n  static forRoot(config: ShowdownConfig | Showdown.ConverterOptions): ModuleWithProviders<ShowdownModule> {\\n    return {\\n      ngModule: ShowdownModule,\\n      providers: [{provide: ShowdownConfig, useValue: config}]\\n    };\\n  }\\n\\n}\\n\",\"/**\\n * Generated bundle index. Do not edit.\\n */\\n\\nexport * from './index';\\n\"],\"names\":[\"hasOwnProperty\",\"i1.ShowdownConfig\",\"i2.ShowdownConfig\",\"i1.ShowdownComponent\"],\"mappings\":\"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\"}","type":"asset"}]}