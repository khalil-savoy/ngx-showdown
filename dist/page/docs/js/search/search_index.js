var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/ShowdownComponent.html",[0,0.584,1,0.736]],["body/components/ShowdownComponent.html",[0,1.02,1,1.097,2,1.61,3,0.386,4,0.311,5,0.969,6,0.969,7,0.247,8,0.74,9,0.663,10,1.063,11,2.329,12,1.286,13,1.645,14,1.361,15,0.641,16,0.791,17,1.295,18,0.086,19,0.772,20,0.893,21,0.41,22,0.817,23,0.641,24,1.151,25,1.151,26,0.517,27,2.014,28,2.582,29,2.039,30,1.255,31,1.761,32,1.761,33,1.569,34,1.679,35,1.539,36,2.329,37,1.61,38,1.852,39,1.255,40,1.414,41,1.229,42,1.229,43,1.311,44,0.969,45,1.749,46,0.958,47,0.772,48,1.229,49,2.53,50,1.749,51,1.61,52,1.229,53,1.795,54,1.229,55,1.229,56,1.255,57,0.473,58,0.978,59,2.065,60,1.576,61,0.978,62,1.229,63,2.065,64,0.476,65,0.517,66,1.621,67,1.229,68,1.576,69,2.836,70,1.61,71,0.589,72,0.969,73,2.405,74,2.065,75,2.198,76,1.014,77,1.181,78,1.397,79,0.969,80,1.147,81,1.32,82,0.893,83,1.32,84,1.61,85,1.014,86,1.61,87,0.979,88,2.405,89,2.065,90,1.576,91,1.576,92,2.668,93,1.61,94,2.065,95,1.255,96,2.065,97,2.065,98,2.065,99,2.065,100,2.065,101,2.065,102,2.065,103,2.065,104,2.065,105,2.065,106,2.22,107,2.065,108,2.065,109,1.836,110,1.576,111,1.61,112,2.065,113,2.065,114,0.969,115,1.229,116,1.61,117,0.969,118,0.978,119,2.198,120,0.978,121,1.229,122,1.576,123,1.147,124,2.014,125,1.229,126,0.969,127,0.969,128,0.969,129,0.969,130,0.969,131,0.969,132,0.969,133,0.589,134,0.476,135,0.589,136,0.589,137,1.311,138,1.229,139,0.969,140,0.978,141,0.969,142,0.969,143,0.969,144,0.969,145,1.61,146,2.065,147,0.969,148,0.969,149,0.969,150,0.74,151,0.969,152,0.969,153,0.969,154,0.969,155,0.969,156,0.969,157,0.969,158,0.74,159,0.969,160,0.969,161,0.969,162,0.969,163,0.969,164,0.969,165,0.969,166,0.969,167,0.969,168,0.969,169,0.969,170,0.969,171,0.969,172,0.969,173,0.969,174,0.589,175,1.61,176,0.969,177,0.74,178,0.969,179,0.772,180,0.589,181,1.621,182,1.621,183,0.969,184,2.405,185,0.476,186,0.969,187,0.969,188,0.74,189,1.229,190,0.969,191,0.969,192,0.969,193,0.969,194,1.61,195,0.969,196,0.74,197,0.74,198,1.229,199,1.576,200,0.74,201,0.969,202,0.589,203,0.969,204,0.969,205,0.969,206,0.969,207,0.74,208,0.74,209,0.74,210,0.969,211,0.386,212,1.61,213,0.969,214,0.969,215,0.969,216,0.969,217,0.969,218,0.969,219,1.229,220,0.969,221,0.969,222,0.74,223,0.969,224,0.969,225,0.589,226,2.405,227,0.969,228,0.74,229,0.311,230,0.74,231,0.969,232,0.029,233,0.029]],["title/injectables/ShowdownConverter.html",[57,0.451,234,0.914]],["body/injectables/ShowdownConverter.html",[3,0.902,4,0.726,7,0.576,9,0.984,12,0.984,13,1.221,14,1.221,15,1.221,16,1.506,17,1.386,18,0.085,19,1.196,20,0.992,21,0.949,22,0.808,24,1.25,25,1.25,26,0.984,29,2.017,30,1.863,35,1.485,38,1.708,46,1.221,53,1.831,56,1.375,57,0.842,64,1.112,65,0.984,66,2.113,67,2.341,71,1.375,76,1.506,77,1.831,78,1.221,80,1.221,81,1.221,82,0.781,83,1.385,85,1.112,87,1.196,123,0.902,124,1.863,125,2.341,135,1.375,137,1.112,179,0.984,197,1.728,211,0.902,219,2.341,222,1.728,232,0.056,233,0.056,234,1.599,235,2.263,236,2.655,237,1.728,238,1.506,239,3.066,240,2.341,241,2.341,242,3.066,243,3.066,244,3.066,245,3.066,246,2.263,247,2.263,248,2.263,249,2.263,250,2.263,251,2.263,252,1.375,253,2.263,254,2.263,255,2.263,256,1.728,257,2.263,258,2.263,259,2.263]],["title/modules/ShowdownModule.html",[260,1.394,261,0.914]],["body/modules/ShowdownModule.html",[1,0.931,3,0.832,4,0.67,7,0.532,9,0.931,14,1.328,17,1.405,18,0.085,19,1.366,20,0.964,21,0.918,22,0.806,23,1.744,24,1.215,25,1.215,26,1.156,39,1.763,40,1.425,45,1.763,57,0.771,65,0.67,76,1.974,77,1.86,78,0.832,80,0.832,81,0.832,82,0.532,83,0.832,87,1.156,123,0.832,135,1.269,136,1.269,137,1.026,138,1.594,179,0.931,181,1.269,182,1.269,185,1.026,211,0.832,225,1.269,229,0.931,232,0.053,233,0.053,238,1.77,252,1.763,260,1.269,261,1.779,262,1.269,263,0.832,264,1.594,265,2.545,266,1.594,267,1.594,268,1.594,269,1.594,270,2.215,271,1.594,272,1.269,273,2.088,274,2.75,275,2.75,276,2.49,277,2.088,278,2.901,279,3.334,280,2.088,281,2.215,282,2.901,283,2.901,284,2.215,285,2.215,286,2.901,287,2.901,288,2.901,289,2.901,290,2.215,291,2.901,292,3.334,293,1.594,294,1.156,295,2.088,296,2.088,297,1.594,298,1.594]],["title/pipes/ShowdownPipe.html",[294,0.914,299,0.914]],["body/pipes/ShowdownPipe.html",[0,0.769,3,0.881,4,0.71,7,0.564,9,0.969,10,1.203,12,1.368,13,1.739,14,1.203,15,1.203,16,1.483,17,1.352,18,0.085,19,1.185,20,0.875,21,0.769,22,0.859,23,1.203,24,1.24,25,1.24,26,0.969,28,2.635,29,2.094,31,1.483,32,1.483,33,1.483,34,1.483,35,1.626,38,1.898,40,1.483,56,1.344,57,0.594,58,1.344,61,1.344,65,0.71,78,0.881,80,0.881,81,1.369,82,0.564,83,0.881,85,1.087,87,0.969,119,2.305,123,1.471,136,1.344,140,1.344,174,1.834,179,0.969,185,1.087,188,1.689,211,1.203,232,0.055,233,0.055,294,1.589,299,1.471,300,2.212,301,1.689,302,3.333,303,3.019,304,3.019,305,3.019,306,2.212,307,3.019,308,2.212,309,2.212]],["title/directives/SourceDirective.html",[47,0.736,229,0.736]],["body/directives/SourceDirective.html",[0,0.838,1,1.313,3,0.682,4,1.126,7,0.436,9,0.808,10,1.189,12,1.248,13,1.51,14,1.397,15,1.003,16,1.237,17,1.313,18,0.085,19,1.057,20,0.893,21,0.641,22,0.495,23,1.003,24,0.958,25,1.126,26,0.808,27,2,31,1.617,32,1.617,33,1.237,34,0.842,35,1.549,45,2,46,0.682,47,1.295,50,2.363,53,1.802,54,1.923,55,1.923,58,1.53,60,2.28,61,1.041,62,1.923,64,0.842,65,0.808,66,1.814,68,1.923,71,1.041,78,1.311,80,1.003,81,1.003,82,0.838,83,1.003,85,0.842,95,1.53,106,1.53,109,1.923,120,1.53,121,1.923,122,1.308,123,0.682,124,1.814,137,0.842,179,0.808,181,1.814,182,1.814,189,1.308,196,1.308,198,1.308,199,1.923,202,2.486,207,1.308,209,1.308,211,0.682,228,1.308,229,1.217,230,1.923,232,0.046,233,0.046,276,1.53,293,1.308,310,1.308,311,1.923,312,2.518,313,2.518,314,3.292,315,2.28,316,3.357,317,3.081,318,2.513,319,2.518,320,2.518,321,2.518,322,2.969,323,2.518,324,2.518,325,1.713,326,3.292,327,2.513,328,2.518,329,2.518,330,1.713,331,3.292,332,2.518,333,2.518,334,2.518,335,1.713,336,2.986,337,2.518,338,1.041,339,1.713,340,1.713,341,2.518,342,1.713,343,1.713,344,1.713,345,1.713,346,1.713]],["title/coverage.html",[347,2.362]],["body/coverage.html",[0,0.856,1,1.079,7,0.856,8,2.566,18,0.081,47,1.079,57,0.661,82,0.856,229,1.079,232,0.071,233,0.071,234,1.339,236,2.566,237,2.566,294,1.339,299,1.339,301,2.566,310,2.566,338,2.042,347,2.566,348,2.042,349,3.36,350,3.36,351,3.36,352,3.36,353,3.36,354,3.36,355,3.36,356,3.36,357,3.36,358,3.36,359,3.36,360,3.36]],["title/dependencies.html",[263,1.095,361,1.175]],["body/dependencies.html",[18,0.082,20,0.877,22,0.678,133,2.092,134,1.692,232,0.073,233,0.073,263,1.591,362,3.444,363,3.444,364,2.629,365,2.629,366,4.217,367,2.629,368,3.444,369,3.444]],["title/index.html",[64,0.95,370,1.476,371,1.476]],["body/index.html",[0,1.008,1,0.924,4,0.663,7,0.336,10,1.32,11,1.943,12,1.183,13,1.428,15,0.526,17,1.403,18,0.085,19,0.924,20,0.995,21,0.979,22,0.876,24,1.253,25,1.253,26,1.064,27,1.899,28,2.406,29,1.945,30,0.802,31,1.535,32,1.852,33,1.535,34,1.702,35,1.245,36,1.577,38,1.25,39,1.749,40,1.761,41,1.007,42,1.577,43,0.648,46,1.32,47,0.817,48,1.943,49,1.577,50,2.335,52,1.943,53,1.811,57,0.652,65,0.424,69,1.577,75,1.007,76,1.628,77,1.628,82,0.648,87,0.924,90,1.007,91,1.007,95,1.749,106,1.546,110,1.007,115,1.943,118,1.546,120,1.255,133,0.802,134,0.648,140,1.255,150,1.943,158,1.577,174,0.802,177,1.577,179,0.424,180,1.546,185,0.648,200,1.943,202,0.802,208,1.007,229,0.663,232,0.052,233,0.038,234,0.823,238,0.648,240,1.007,241,1.007,252,1.749,256,1.007,261,1.468,263,0.823,274,1.577,275,1.943,276,2.105,281,1.007,284,2.53,285,1.577,290,2.645,294,0.823,297,1.007,298,1.007,299,0.526,302,1.577,311,1.007,315,1.577,316,1.943,317,2.737,318,1.007,322,1.007,327,1.007,338,0.802,348,0.802,361,0.802,364,1.007,365,1.007,367,1.007,372,2.198,373,1.007,374,2.065,375,1.32,376,1.32,377,1.32,378,1.32,379,3.464,380,2.879,381,2.065,382,1.32,383,1.32,384,1.32,385,1.32,386,1.32,387,1.32,388,1.32,389,2.545,390,1.32,391,2.065,392,2.065,393,1.32,394,1.32,395,1.32,396,1.32,397,1.32,398,2.065,399,2.545,400,2.545,401,1.32,402,1.32,403,1.007,404,1.32,405,1.32,406,1.32,407,1.32,408,2.545,409,2.065,410,2.065,411,1.32,412,1.32,413,1.32,414,1.32,415,1.32,416,1.32,417,1.32,418,1.32,419,3.585,420,2.065,421,1.32,422,1.32,423,1.32,424,1.32,425,1.32,426,1.32,427,1.32,428,1.32,429,1.32,430,2.545,431,2.065,432,2.065,433,1.32,434,1.32,435,1.32,436,1.32,437,1.32,438,1.32,439,1.32,440,2.545,441,2.065,442,1.32,443,2.545,444,1.32,445,2.065,446,1.32,447,1.577,448,1.007,449,1.32,450,1.32,451,2.065,452,1.32,453,1.32,454,1.32,455,1.32,456,1.32,457,1.32,458,1.32,459,2.065,460,1.32,461,1.32,462,1.32,463,1.32,464,2.065,465,1.32,466,1.32,467,1.32,468,1.32,469,2.545,470,1.32,471,1.32,472,1.32,473,2.545,474,1.32,475,2.065,476,1.32,477,1.32,478,1.32,479,1.32,480,1.32,481,1.32,482,1.32,483,1.32,484,2.065,485,1.32,486,1.32,487,2.545,488,1.32,489,1.32,490,1.32,491,1.32,492,1.32,493,1.32,494,1.015,495,1.007,496,0.802,497,0.802,498,1.32,499,1.32,500,0.802]],["title/license.html",[370,1.476,371,1.476,494,0.95]],["body/license.html",[18,0.072,46,1.466,232,0.067,233,0.067,272,1.825,348,1.825,448,2.293,494,1.476,495,3.038,496,1.825,497,1.825,500,2.237,501,3.681,502,3.004,503,3.004,504,3.004,505,3.004,506,3.004,507,3.004,508,3.681,509,4.463,510,3.004,511,3.004,512,3.004,513,3.979,514,3.004,515,3.681,516,3.004,517,3.004,518,3.004,519,3.004,520,3.004,521,3.004,522,3.004,523,3.004,524,3.004,525,3.681,526,3.004,527,3.004,528,3.004,529,3.004,530,3.004,531,3.004,532,3.004,533,3.681,534,3.681,535,3.004,536,3.004,537,3.004,538,3.004,539,3.004,540,3.004,541,3.004,542,3.004,543,3.004,544,3.004,545,3.004,546,3.004,547,3.004,548,3.004,549,3.004,550,3.004,551,3.004,552,3.004,553,3.004,554,3.004,555,3.004,556,3.004,557,3.004,558,3.004,559,3.004,560,3.004,561,3.004,562,3.004,563,3.004]],["title/modules.html",[262,1.88]],["body/modules.html",[18,0.074,134,1.749,232,0.074,233,0.074,261,1.418,262,2.164,564,3.561,565,3.561,566,3.561]],["title/overview.html",[567,2.362]],["body/overview.html",[0,0.836,18,0.079,23,1.792,47,1.053,57,0.813,180,2.649,225,1.994,232,0.07,233,0.07,234,1.307,238,1.612,260,2.359,261,1.779,263,1.307,264,2.505,265,2.505,266,2.505,267,2.505,268,2.505,269,2.505,270,2.963,271,2.505,272,1.994,299,1.307,567,2.505]],["title/properties.html",[43,1.35,361,1.175]],["body/properties.html",[9,1.055,10,1.548,12,1.055,18,0.083,21,0.837,22,0.814,43,1.615,87,1.055,118,1.998,232,0.071,233,0.071,372,2.51,373,2.51,403,2.51,447,2.51,494,1.615,496,1.998,497,1.998,500,1.998,568,3.288,569,3.288,570,3.288,571,3.288,572,3.288,573,3.288,574,3.288,575,3.288,576,3.288,577,3.288,578,3.288,579,3.288,580,3.886,581,3.288,582,3.288,583,3.288,584,3.288]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0.0.0",{"_index":569,"title":{},"body":{"properties.html":{}}}],["1",{"_index":180,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{},"overview.html":{}}}],["1/1",{"_index":356,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":394,"title":{},"body":{"index.html":{}}}],["100",{"_index":355,"title":{},"body":{"coverage.html":{}}}],["16.0.0",{"_index":366,"title":{},"body":{"dependencies.html":{}}}],["1:set",{"_index":44,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["1px",{"_index":103,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["2",{"_index":372,"title":{},"body":{"index.html":{},"properties.html":{}}}],["2.0.1",{"_index":368,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":369,"title":{},"body":{"dependencies.html":{}}}],["2.6.2",{"_index":363,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":352,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":89,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["4/5",{"_index":358,"title":{},"body":{"coverage.html":{}}}],["5px",{"_index":101,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["66",{"_index":351,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":354,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":357,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":353,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":99,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["__",{"_index":182,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["__example",{"_index":181,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["__foo__",{"_index":413,"title":{},"body":{"index.html":{}}}],["__some",{"_index":303,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["_domsanitizer",{"_index":74,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_elementref",{"_index":84,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_http",{"_index":326,"title":{},"body":{"directives/SourceDirective.html":{}}}],["_sanitize",{"_index":190,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_showdowncomponent",{"_index":329,"title":{},"body":{"directives/SourceDirective.html":{}}}],["_tooption",{"_index":141,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_tooption(sanitize",{"_index":195,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["_tooption(value",{"_index":223,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["abcbind",{"_index":411,"title":{},"body":{"index.html":{}}}],["abcsanitize",{"_index":412,"title":{},"body":{"index.html":{}}}],["above",{"_index":532,"title":{},"body":{"license.html":{}}}],["access",{"_index":218,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["accessors",{"_index":70,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["action",{"_index":557,"title":{},"body":{"license.html":{}}}],["actual_component",{"_index":231,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["add",{"_index":274,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["alias",{"_index":112,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["allowedcommonjsdependencies",{"_index":391,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":523,"title":{},"body":{"license.html":{}}}],["angular",{"_index":10,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{},"properties.html":{}}}],["angular.json",{"_index":393,"title":{},"body":{"index.html":{}}}],["angular/angular/#11859",{"_index":463,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":365,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["angular/common/http",{"_index":315,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["angular/core",{"_index":20,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"dependencies.html":{},"index.html":{}}}],["angular/platform",{"_index":133,"title":{},"body":{"components/ShowdownComponent.html":{},"dependencies.html":{},"index.html":{}}}],["angular2",{"_index":575,"title":{},"body":{"properties.html":{}}}],["angular:browser",{"_index":397,"title":{},"body":{"index.html":{}}}],["anther",{"_index":48,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["aot",{"_index":470,"title":{},"body":{"index.html":{}}}],["app",{"_index":275,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["appmodule",{"_index":26,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["arising",{"_index":561,"title":{},"body":{"license.html":{}}}],["associated",{"_index":510,"title":{},"body":{"license.html":{}}}],["author",{"_index":584,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":550,"title":{},"body":{"license.html":{}}}],["b",{"_index":52,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["backslashescapeshtmltags",{"_index":147,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["bar",{"_index":283,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["bcontribute",{"_index":479,"title":{},"body":{"index.html":{}}}],["bind",{"_index":27,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["bindentation",{"_index":476,"title":{},"body":{"index.html":{}}}],["binding",{"_index":398,"title":{},"body":{"index.html":{}}}],["black",{"_index":105,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["bold",{"_index":37,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["boolean",{"_index":92,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["bootstrap",{"_index":264,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["border",{"_index":102,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["both",{"_index":408,"title":{},"body":{"index.html":{}}}],["box",{"_index":97,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["browse",{"_index":566,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":134,"title":{},"body":{"components/ShowdownComponent.html":{},"dependencies.html":{},"index.html":{},"modules.html":{}}}],["browser/domsanitizer#sanitize",{"_index":192,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["bugs",{"_index":579,"title":{},"body":{"properties.html":{}}}],["build",{"_index":392,"title":{},"body":{"index.html":{}}}],["buildcredits",{"_index":492,"title":{},"body":{"index.html":{}}}],["builder",{"_index":395,"title":{},"body":{"index.html":{}}}],["built",{"_index":485,"title":{},"body":{"index.html":{}}}],["bwithout",{"_index":475,"title":{},"body":{"index.html":{}}}],["c",{"_index":401,"title":{},"body":{"index.html":{}}}],["call",{"_index":207,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["causes",{"_index":462,"title":{},"body":{"index.html":{}}}],["changes",{"_index":208,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["char",{"_index":467,"title":{},"body":{"index.html":{}}}],["charge",{"_index":505,"title":{},"body":{"license.html":{}}}],["chars",{"_index":466,"title":{},"body":{"index.html":{}}}],["check",{"_index":201,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["claim",{"_index":553,"title":{},"body":{"license.html":{}}}],["class",{"_index":25,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["cli",{"_index":486,"title":{},"body":{"index.html":{}}}],["click",{"_index":110,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["cluster_showdownmodule",{"_index":266,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["cluster_showdownmodule_declarations",{"_index":268,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["cluster_showdownmodule_exports",{"_index":269,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["cluster_showdownmodule_providers",{"_index":267,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["code",{"_index":177,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["codeblocks.after",{"_index":288,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["color",{"_index":427,"title":{},"body":{"index.html":{}}}],["colorextension",{"_index":420,"title":{},"body":{"index.html":{}}}],["compiler",{"_index":471,"title":{},"body":{"index.html":{}}}],["completehtmldocument",{"_index":148,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["component",{"_index":0,"title":{"components/ShowdownComponent.html":{}},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["component_template",{"_index":227,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["conditions",{"_index":531,"title":{},"body":{"license.html":{}}}],["config",{"_index":76,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["config.extensions",{"_index":253,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["config.flavor",{"_index":255,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["config.provider",{"_index":135,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{}}}],["configurable",{"_index":224,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["connection",{"_index":562,"title":{},"body":{"license.html":{}}}],["console.log",{"_index":289,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["console.log(`some:\\nmarkdown",{"_index":243,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["console.log(showdownconverter.makehtml",{"_index":416,"title":{},"body":{"index.html":{}}}],["const",{"_index":138,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{}}}],["constructor",{"_index":71,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["constructor(@optional",{"_index":251,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["constructor(_elementref",{"_index":72,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["constructor(_showdowncomponent",{"_index":325,"title":{},"body":{"directives/SourceDirective.html":{}}}],["constructor(config",{"_index":246,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["constructor(private",{"_index":196,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["constructor(showdowncomponent",{"_index":433,"title":{},"body":{"index.html":{}}}],["constructor(showdownconverter",{"_index":241,"title":{},"body":{"injectables/ShowdownConverter.html":{},"index.html":{}}}],["content",{"_index":50,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["contentwhen",{"_index":409,"title":{},"body":{"index.html":{}}}],["contract",{"_index":558,"title":{},"body":{"license.html":{}}}],["convert",{"_index":118,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{},"properties.html":{}}}],["converter",{"_index":87,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"index.html":{},"properties.html":{}}}],["converter.getoption('color",{"_index":424,"title":{},"body":{"index.html":{}}}],["converter.provider",{"_index":136,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{}}}],["converter.provider.ts",{"_index":237,"title":{},"body":{"injectables/ShowdownConverter.html":{},"coverage.html":{}}}],["converter.provider.ts:40",{"_index":247,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["converter.provider.ts:53",{"_index":248,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["converteroptions",{"_index":441,"title":{},"body":{"index.html":{}}}],["cool",{"_index":108,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["copies",{"_index":525,"title":{},"body":{"license.html":{}}}],["copy",{"_index":508,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":495,"title":{},"body":{"index.html":{},"license.html":{}}}],["coverage",{"_index":347,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":418,"title":{},"body":{"index.html":{}}}],["current",{"_index":121,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["damages",{"_index":554,"title":{},"body":{"license.html":{}}}],["deal",{"_index":512,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":563,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"overview.html":{}}}],["default",{"_index":440,"title":{},"body":{"index.html":{}}}],["define",{"_index":216,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["defined",{"_index":78,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["definition",{"_index":176,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["demo",{"_index":374,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":263,"title":{"dependencies.html":{}},"body":{"modules/ShowdownModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["description",{"_index":9,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"properties.html":{}}}],["development",{"_index":483,"title":{},"body":{"index.html":{}}}],["devkit/build",{"_index":396,"title":{},"body":{"index.html":{}}}],["devusage",{"_index":383,"title":{},"body":{"index.html":{}}}],["direct",{"_index":217,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["directive",{"_index":47,"title":{"directives/SourceDirective.html":{}},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["directives",{"_index":228,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["disableforced4spacesindentedsublists",{"_index":149,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["distribute",{"_index":521,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":348,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["dom",{"_index":5,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["domsanitizer",{"_index":75,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["domsanitizer`](https://angular.io/api/platform",{"_index":191,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["dynamic",{"_index":145,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["element",{"_index":49,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["elementref",{"_index":73,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["eliav",{"_index":497,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["emoji",{"_index":150,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["enables",{"_index":94,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["encodeemails",{"_index":151,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["equivalent",{"_index":113,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["error",{"_index":322,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["es6",{"_index":478,"title":{},"body":{"index.html":{}}}],["escape",{"_index":465,"title":{},"body":{"index.html":{}}}],["etc",{"_index":468,"title":{},"body":{"index.html":{}}}],["event",{"_index":448,"title":{},"body":{"index.html":{},"license.html":{}}}],["event.message)\">**loading",{"_index":333,"title":{},"body":{"directives/SourceDirective.html":{}}}],["eventemitter",{"_index":331,"title":{},"body":{"directives/SourceDirective.html":{}}}],["events",{"_index":323,"title":{},"body":{"directives/SourceDirective.html":{}}}],["example",{"_index":14,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["existing",{"_index":450,"title":{},"body":{"index.html":{}}}],["explanations",{"_index":386,"title":{},"body":{"index.html":{}}}],["export",{"_index":24,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["exportas",{"_index":62,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["exports",{"_index":265,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["express",{"_index":541,"title":{},"body":{"license.html":{}}}],["extends",{"_index":56,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{}}}],["extension",{"_index":443,"title":{},"body":{"index.html":{}}}],["extensions",{"_index":252,"title":{},"body":{"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["false",{"_index":140,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["file",{"_index":7,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":511,"title":{},"body":{"license.html":{}}}],["filter(text",{"_index":422,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":546,"title":{},"body":{"license.html":{}}}],["fix",{"_index":91,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["flavor",{"_index":284,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["flavors",{"_index":437,"title":{},"body":{"index.html":{}}}],["following",{"_index":530,"title":{},"body":{"license.html":{}}}],["foo",{"_index":282,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["forroot",{"_index":277,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["forroot(config",{"_index":278,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["free",{"_index":504,"title":{},"body":{"license.html":{}}}],["full",{"_index":388,"title":{},"body":{"index.html":{}}}],["furnished",{"_index":528,"title":{},"body":{"license.html":{}}}],["g",{"_index":455,"title":{},"body":{"index.html":{}}}],["get(this.src",{"_index":342,"title":{},"body":{"directives/SourceDirective.html":{}}}],["getoptions",{"_index":129,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["getting",{"_index":370,"title":{"index.html":{},"license.html":{}},"body":{}}],["ghcodeblocks",{"_index":152,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["ghcompatibleheaderid",{"_index":153,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["ghmentions",{"_index":154,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["ghmentionslink",{"_index":155,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["github",{"_index":285,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["granted",{"_index":503,"title":{},"body":{"license.html":{}}}],["green",{"_index":425,"title":{},"body":{"index.html":{}}}],["h1",{"_index":399,"title":{},"body":{"index.html":{}}}],["h2",{"_index":400,"title":{},"body":{"index.html":{}}}],["hasownproperty",{"_index":249,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["hasownproperty.call(options",{"_index":258,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["header",{"_index":36,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["headerlevelstart",{"_index":88,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["hereby",{"_index":502,"title":{},"body":{"license.html":{}}}],["highlight",{"_index":431,"title":{},"body":{"index.html":{}}}],["highlight.js/styles/default.css",{"_index":432,"title":{},"body":{"index.html":{}}}],["highlightextension",{"_index":430,"title":{},"body":{"index.html":{}}}],["holders",{"_index":551,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":577,"title":{},"body":{"properties.html":{}}}],["html",{"_index":13,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["html}\\n",{"_index":245,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["http",{"_index":312,"title":{},"body":{"directives/SourceDirective.html":{}}}],["http://yisraelx.github.io/ngx",{"_index":578,"title":{},"body":{"properties.html":{}}}],["httpclient",{"_index":327,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["httpclientmodule",{"_index":314,"title":{},"body":{"directives/SourceDirective.html":{}}}],["httperrorresponse",{"_index":337,"title":{},"body":{"directives/SourceDirective.html":{}}}],["https://github.com/yisraelx/ngx",{"_index":580,"title":{},"body":{"properties.html":{}}}],["https://unpkg.com/ngx",{"_index":319,"title":{},"body":{"directives/SourceDirective.html":{}}}],["identifier",{"_index":349,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":58,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["implied",{"_index":542,"title":{},"body":{"license.html":{}}}],["import",{"_index":17,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["imports",{"_index":276,"title":{},"body":{"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["included",{"_index":535,"title":{},"body":{"license.html":{}}}],["including",{"_index":515,"title":{},"body":{"license.html":{}}}],["indentation",{"_index":90,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["index",{"_index":64,"title":{"index.html":{}},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["information",{"_index":385,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":126,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["init",{"_index":200,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["init/changes",{"_index":339,"title":{},"body":{"directives/SourceDirective.html":{}}}],["injectable",{"_index":234,"title":{"injectables/ShowdownConverter.html":{}},"body":{"injectables/ShowdownConverter.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["injectables",{"_index":235,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["injected",{"_index":417,"title":{},"body":{"index.html":{}}}],["input",{"_index":106,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["inputs",{"_index":68,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["install",{"_index":379,"title":{},"body":{"index.html":{}}}],["installrun",{"_index":488,"title":{},"body":{"index.html":{}}}],["instance",{"_index":239,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["instances",{"_index":291,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["integration",{"_index":373,"title":{},"body":{"index.html":{},"properties.html":{}}}],["interface",{"_index":178,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["internal",{"_index":137,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["interpolation",{"_index":459,"title":{},"body":{"index.html":{}}}],["key",{"_index":219,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{}}}],["keys",{"_index":144,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["keywords",{"_index":572,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":540,"title":{},"body":{"license.html":{}}}],["lang",{"_index":445,"title":{},"body":{"index.html":{}}}],["legend",{"_index":225,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"overview.html":{}}}],["liability",{"_index":555,"title":{},"body":{"license.html":{}}}],["liable",{"_index":552,"title":{},"body":{"license.html":{}}}],["library",{"_index":493,"title":{},"body":{"index.html":{}}}],["license",{"_index":494,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":498,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":198,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["limitation",{"_index":516,"title":{},"body":{"license.html":{}}}],["limited",{"_index":543,"title":{},"body":{"license.html":{}}}],["link",{"_index":109,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["list",{"_index":51,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["listen",{"_index":446,"title":{},"body":{"index.html":{}}}],["listeners",{"_index":287,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["listening",{"_index":321,"title":{},"body":{"directives/SourceDirective.html":{}}}],["literalmidwordasterisks",{"_index":156,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["literalmidwordunderscores",{"_index":157,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["live",{"_index":375,"title":{},"body":{"index.html":{}}}],["load",{"_index":202,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["load(url",{"_index":334,"title":{},"body":{"directives/SourceDirective.html":{}}}],["loading",{"_index":318,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["loads",{"_index":410,"title":{},"body":{"index.html":{}}}],["made",{"_index":444,"title":{},"body":{"index.html":{}}}],["make",{"_index":311,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["manually",{"_index":429,"title":{},"body":{"index.html":{}}}],["map_option",{"_index":139,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["map_option.hasownproperty(value",{"_index":142,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["map_option[value",{"_index":143,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["markdown",{"_index":12,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{},"properties.html":{}}}],["markdown)\\nhtml",{"_index":244,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["matching",{"_index":233,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["md",{"_index":403,"title":{},"body":{"index.html":{},"properties.html":{}}}],["merchantability",{"_index":545,"title":{},"body":{"license.html":{}}}],["merge",{"_index":519,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":61,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["method",{"_index":199,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["methods",{"_index":65,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["mit",{"_index":500,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mixing",{"_index":406,"title":{},"body":{"index.html":{}}}],["modify",{"_index":518,"title":{},"body":{"license.html":{}}}],["module",{"_index":260,"title":{"modules/ShowdownModule.html":{}},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["modules",{"_index":262,"title":{"modules.html":{}},"body":{"modules/ShowdownModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":292,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["more",{"_index":384,"title":{},"body":{"index.html":{}}}],["name",{"_index":81,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["new",{"_index":338,"title":{},"body":{"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["ng",{"_index":573,"title":{},"body":{"properties.html":{}}}],["ng2",{"_index":574,"title":{},"body":{"properties.html":{}}}],["ngmodel",{"_index":419,"title":{},"body":{"index.html":{}}}],["ngmodule",{"_index":19,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["ngonchanges",{"_index":209,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["ngoninit",{"_index":203,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["ngpreservewhitespaces",{"_index":473,"title":{},"body":{"index.html":{}}}],["ngx",{"_index":21,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{},"properties.html":{}}}],["noheaderid",{"_index":158,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["noninfringement",{"_index":549,"title":{},"body":{"license.html":{}}}],["note",{"_index":439,"title":{},"body":{"index.html":{}}}],["notice",{"_index":533,"title":{},"body":{"license.html":{}}}],["npm",{"_index":380,"title":{},"body":{"index.html":{}}}],["object",{"_index":30,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"index.html":{}}}],["object.defineproperty(showdowncomponent.prototype",{"_index":220,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["obtaining",{"_index":507,"title":{},"body":{"license.html":{}}}],["occur",{"_index":332,"title":{},"body":{"directives/SourceDirective.html":{}}}],["omitextrawlincodeblocks",{"_index":159,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["onchanges",{"_index":60,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["oninit",{"_index":59,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["openlinksinnewwindow",{"_index":160,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["option",{"_index":42,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["optional",{"_index":83,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["options",{"_index":29,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["options(options",{"_index":187,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["options[key",{"_index":259,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["options_properties_keys",{"_index":146,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["original",{"_index":426,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":560,"title":{},"body":{"license.html":{}}}],["out",{"_index":272,"title":{},"body":{"modules/ShowdownModule.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":95,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["outputs",{"_index":324,"title":{},"body":{"directives/SourceDirective.html":{}}}],["override",{"_index":120,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["overview",{"_index":567,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":361,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["padding",{"_index":100,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["param",{"_index":211,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["parameters",{"_index":80,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["parse",{"_index":447,"title":{},"body":{"index.html":{},"properties.html":{}}}],["parseimgdimensions",{"_index":161,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["parser",{"_index":576,"title":{},"body":{"properties.html":{}}}],["particular",{"_index":547,"title":{},"body":{"license.html":{}}}],["peer",{"_index":364,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["permission",{"_index":501,"title":{},"body":{"license.html":{}}}],["permit",{"_index":526,"title":{},"body":{"license.html":{}}}],["person",{"_index":506,"title":{},"body":{"license.html":{}}}],["persons",{"_index":527,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":299,"title":{"pipes/ShowdownPipe.html":{}},"body":{"pipes/ShowdownPipe.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["pipes",{"_index":300,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["pipetransform",{"_index":307,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["play",{"_index":376,"title":{},"body":{"index.html":{}}}],["plunker",{"_index":378,"title":{},"body":{"index.html":{}}}],["portions",{"_index":537,"title":{},"body":{"license.html":{}}}],["prefixheaderid",{"_index":162,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["preserve",{"_index":474,"title":{},"body":{"index.html":{}}}],["preview",{"_index":107,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["private",{"_index":189,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["problems",{"_index":477,"title":{},"body":{"index.html":{}}}],["project",{"_index":484,"title":{},"body":{"index.html":{}}}],["properties",{"_index":43,"title":{"properties.html":{}},"body":{"components/ShowdownComponent.html":{},"index.html":{},"properties.html":{}}}],["property",{"_index":115,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["provide",{"_index":297,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["provided",{"_index":538,"title":{},"body":{"license.html":{}}}],["provider",{"_index":389,"title":{},"body":{"index.html":{}}}],["providers",{"_index":238,"title":{},"body":{"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"index.html":{},"overview.html":{}}}],["public",{"_index":66,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["publish",{"_index":520,"title":{},"body":{"license.html":{}}}],["pull",{"_index":480,"title":{},"body":{"index.html":{}}}],["pure",{"_index":308,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["purpose",{"_index":548,"title":{},"body":{"license.html":{}}}],["rawheaderid",{"_index":163,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["rawprefixheaderid",{"_index":164,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["red",{"_index":428,"title":{},"body":{"index.html":{}}}],["reference",{"_index":54,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["regex",{"_index":453,"title":{},"body":{"index.html":{}}}],["regexp('markdown",{"_index":454,"title":{},"body":{"index.html":{}}}],["release",{"_index":491,"title":{},"body":{"index.html":{}}}],["released",{"_index":571,"title":{},"body":{"properties.html":{}}}],["remove",{"_index":472,"title":{},"body":{"index.html":{}}}],["render",{"_index":11,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["render(value",{"_index":116,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["replace",{"_index":456,"title":{},"body":{"index.html":{}}}],["repository",{"_index":582,"title":{},"body":{"properties.html":{}}}],["request",{"_index":313,"title":{},"body":{"directives/SourceDirective.html":{}}}],["requests",{"_index":481,"title":{},"body":{"index.html":{}}}],["requires",{"_index":405,"title":{},"body":{"index.html":{}}}],["requirespacebeforeheadingtext",{"_index":165,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["reset",{"_index":271,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}],["responsetype",{"_index":343,"title":{},"body":{"directives/SourceDirective.html":{}}}],["restriction",{"_index":514,"title":{},"body":{"license.html":{}}}],["result",{"_index":119,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{}}}],["results",{"_index":232,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":185,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["returns",{"_index":123,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["rights",{"_index":517,"title":{},"body":{"license.html":{}}}],["root",{"_index":290,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["sanitize",{"_index":69,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["sanitize(sanitize",{"_index":193,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["save",{"_index":382,"title":{},"body":{"index.html":{}}}],["saveand",{"_index":381,"title":{},"body":{"index.html":{}}}],["search",{"_index":449,"title":{},"body":{"index.html":{}}}],["securitycontext",{"_index":132,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["see",{"_index":387,"title":{},"body":{"index.html":{}}}],["selector",{"_index":31,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["sell",{"_index":524,"title":{},"body":{"license.html":{}}}],["semantically",{"_index":570,"title":{},"body":{"properties.html":{}}}],["service",{"_index":415,"title":{},"body":{"index.html":{}}}],["set",{"_index":53,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["set(value",{"_index":221,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["setoptions",{"_index":67,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{}}}],["setoptions(options",{"_index":125,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{}}}],["setsanitize(sanitize",{"_index":131,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["setshowdown(value",{"_index":128,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["setter",{"_index":175,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["setup",{"_index":15,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["shall",{"_index":534,"title":{},"body":{"license.html":{}}}],["showdown",{"_index":22,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"dependencies.html":{},"index.html":{},"properties.html":{}}}],["showdown(value",{"_index":183,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["showdown,[showdown",{"_index":63,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["showdown.component",{"_index":293,"title":{},"body":{"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["showdown.converter",{"_index":250,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["showdown.converteroptions",{"_index":279,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["showdown.filterextension",{"_index":421,"title":{},"body":{"index.html":{}}}],["showdown.git",{"_index":583,"title":{},"body":{"properties.html":{}}}],["showdown.pipe",{"_index":295,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["showdown.showdownextension",{"_index":452,"title":{},"body":{"index.html":{}}}],["showdown.showdownoptions",{"_index":38,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["showdown/issues",{"_index":581,"title":{},"body":{"properties.html":{}}}],["showdown/readme.md",{"_index":320,"title":{},"body":{"directives/SourceDirective.html":{}}}],["showdown:**howdown**load",{"_index":402,"title":{},"body":{"index.html":{}}}],["showdown:options",{"_index":414,"title":{},"body":{"index.html":{}}}],["showdown[src],[showdown][src",{"_index":230,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["showdowncomponent",{"_index":1,"title":{"components/ShowdownComponent.html":{}},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["showdowncomponent#value",{"_index":122,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["showdowncomponent.addextension(highlightextension",{"_index":434,"title":{},"body":{"index.html":{}}}],["showdowncomponent.setflavor('ghost",{"_index":435,"title":{},"body":{"index.html":{}}}],["showdowncomponent.setoptions({emoji",{"_index":436,"title":{},"body":{"index.html":{}}}],["showdownconfig",{"_index":77,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["showdownconverter",{"_index":57,"title":{"injectables/ShowdownConverter.html":{}},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["showdownconverter.makehtml(markdown",{"_index":242,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["showdownconverter:53",{"_index":127,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["showdownmodule",{"_index":261,"title":{"modules/ShowdownModule.html":{}},"body":{"modules/ShowdownModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["showdownmodule.forroot",{"_index":281,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["showdownmodule.forroot({emoji",{"_index":390,"title":{},"body":{"index.html":{}}}],["showdownmodule.forroot({extensions",{"_index":457,"title":{},"body":{"index.html":{}}}],["showdownmodule.forroot({flavor",{"_index":438,"title":{},"body":{"index.html":{}}}],["showdownmodule.forroot({underline",{"_index":442,"title":{},"body":{"index.html":{}}}],["showdownpipe",{"_index":294,"title":{"pipes/ShowdownPipe.html":{}},"body":{"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"coverage.html":{},"index.html":{}}}],["simplelinebreaks",{"_index":166,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["simplifiedautolink",{"_index":167,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["single",{"_index":41,"title":{},"body":{"components/ShowdownComponent.html":{},"index.html":{}}}],["smartindentationfix",{"_index":39,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"index.html":{}}}],["smoothlivepreview",{"_index":168,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["software",{"_index":509,"title":{},"body":{"license.html":{}}}],["solid",{"_index":104,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["solution",{"_index":464,"title":{},"body":{"index.html":{}}}],["somecomponent",{"_index":33,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["someextension",{"_index":451,"title":{},"body":{"index.html":{}}}],["someservice",{"_index":240,"title":{},"body":{"injectables/ShowdownConverter.html":{},"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["source.directive",{"_index":296,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["sourcedirective",{"_index":229,"title":{"directives/SourceDirective.html":{}},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["sourcedirective#src",{"_index":336,"title":{},"body":{"directives/SourceDirective.html":{}}}],["sources",{"_index":407,"title":{},"body":{"index.html":{}}}],["splitadjacentblockquotes",{"_index":169,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src",{"_index":317,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["src/showdown",{"_index":236,"title":{},"body":{"injectables/ShowdownConverter.html":{},"coverage.html":{}}}],["src/showdown.component.ts",{"_index":8,"title":{},"body":{"components/ShowdownComponent.html":{},"coverage.html":{}}}],["src/showdown.component.ts:158",{"_index":114,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:174",{"_index":111,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:203",{"_index":86,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:207",{"_index":130,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:243",{"_index":93,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:245",{"_index":79,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.component.ts:280",{"_index":117,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["src/showdown.module.ts",{"_index":273,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["src/showdown.module.ts:59",{"_index":280,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["src/showdown.pipe.ts",{"_index":301,"title":{},"body":{"pipes/ShowdownPipe.html":{},"coverage.html":{}}}],["src/showdown.pipe.ts:55",{"_index":306,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["src/source.directive.ts",{"_index":310,"title":{},"body":{"directives/SourceDirective.html":{},"coverage.html":{}}}],["src/source.directive.ts:112",{"_index":335,"title":{},"body":{"directives/SourceDirective.html":{}}}],["src/source.directive.ts:75",{"_index":330,"title":{},"body":{"directives/SourceDirective.html":{}}}],["src/source.directive.ts:87",{"_index":328,"title":{},"body":{"directives/SourceDirective.html":{}}}],["stackblitz",{"_index":377,"title":{},"body":{"index.html":{}}}],["standalone",{"_index":16,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["started",{"_index":371,"title":{"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":350,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":45,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"directives/SourceDirective.html":{}}}],["strikethrough",{"_index":170,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["string",{"_index":35,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["styles",{"_index":96,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["subject",{"_index":529,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":522,"title":{},"body":{"license.html":{}}}],["subscribe((response",{"_index":344,"title":{},"body":{"directives/SourceDirective.html":{}}}],["substantial",{"_index":536,"title":{},"body":{"license.html":{}}}],["super(config",{"_index":197,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{}}}],["support",{"_index":564,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":565,"title":{},"body":{"modules.html":{}}}],["table",{"_index":360,"title":{},"body":{"coverage.html":{}}}],["tables",{"_index":171,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["tablesheaderid",{"_index":172,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":359,"title":{},"body":{"coverage.html":{}}}],["tasklists",{"_index":173,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["template",{"_index":32,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["test",{"_index":489,"title":{},"body":{"index.html":{}}}],["testbuild",{"_index":490,"title":{},"body":{"index.html":{}}}],["text",{"_index":34,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["text.replace('$color",{"_index":423,"title":{},"body":{"index.html":{}}}],["this._domsanitizer.sanitize(securitycontext.html",{"_index":214,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this._elementref.nativeelement.innerhtml",{"_index":215,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this._elementref.nativeelement.innerhtml.trim",{"_index":205,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this._sanitize",{"_index":194,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this._showdowncomponent.render(response",{"_index":345,"title":{},"body":{"directives/SourceDirective.html":{}}}],["this.error.emit(error",{"_index":346,"title":{},"body":{"directives/SourceDirective.html":{}}}],["this.getoptions",{"_index":186,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this.load",{"_index":340,"title":{},"body":{"directives/SourceDirective.html":{}}}],["this.makehtml(this.value",{"_index":213,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this.makehtml(value",{"_index":309,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["this.render",{"_index":210,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this.render(this._elementref.nativeelement.innerhtml",{"_index":206,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["this.setflavor((config",{"_index":254,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["this.setoption(key",{"_index":222,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{}}}],["this.setoptions(config",{"_index":257,"title":{},"body":{"injectables/ShowdownConverter.html":{}}}],["this.setoptions(options",{"_index":188,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{}}}],["this.src",{"_index":341,"title":{},"body":{"directives/SourceDirective.html":{}}}],["this.value",{"_index":184,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["tort",{"_index":559,"title":{},"body":{"license.html":{}}}],["transform",{"_index":302,"title":{},"body":{"pipes/ShowdownPipe.html":{},"index.html":{}}}],["transform(value",{"_index":305,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["tree",{"_index":6,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["troubleshoot",{"_index":458,"title":{},"body":{"index.html":{}}}],["true",{"_index":40,"title":{},"body":{"components/ShowdownComponent.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["tslib",{"_index":362,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":82,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"coverage.html":{},"index.html":{}}}],["type:'listener",{"_index":286,"title":{},"body":{"modules/ShowdownModule.html":{}}}],["typeof",{"_index":212,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["types/showdown",{"_index":367,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["typescript",{"_index":179,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"modules/ShowdownModule.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{},"index.html":{}}}],["undefined",{"_index":204,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["under",{"_index":499,"title":{},"body":{"index.html":{}}}],["underline",{"_index":174,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["underline__",{"_index":304,"title":{},"body":{"pipes/ShowdownPipe.html":{}}}],["unescaped",{"_index":461,"title":{},"body":{"index.html":{}}}],["url",{"_index":316,"title":{},"body":{"directives/SourceDirective.html":{},"index.html":{}}}],["url..**note",{"_index":404,"title":{},"body":{"index.html":{}}}],["use",{"_index":46,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{},"index.html":{},"license.html":{}}}],["usevalue",{"_index":298,"title":{},"body":{"modules/ShowdownModule.html":{},"index.html":{}}}],["using",{"_index":460,"title":{},"body":{"index.html":{}}}],["value",{"_index":28,"title":{},"body":{"components/ShowdownComponent.html":{},"pipes/ShowdownPipe.html":{},"index.html":{}}}],["vanilla",{"_index":256,"title":{},"body":{"injectables/ShowdownConverter.html":{},"index.html":{}}}],["var",{"_index":226,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["variable",{"_index":55,"title":{},"body":{"components/ShowdownComponent.html":{},"directives/SourceDirective.html":{}}}],["version",{"_index":568,"title":{},"body":{"properties.html":{}}}],["void",{"_index":124,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"directives/SourceDirective.html":{}}}],["warranties",{"_index":544,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":539,"title":{},"body":{"license.html":{}}}],["welcome",{"_index":482,"title":{},"body":{"index.html":{}}}],["whether",{"_index":556,"title":{},"body":{"license.html":{}}}],["whitespaces",{"_index":469,"title":{},"body":{"index.html":{}}}],["width",{"_index":98,"title":{},"body":{"components/ShowdownComponent.html":{}}}],["without",{"_index":513,"title":{},"body":{"license.html":{}}}],["yarn",{"_index":487,"title":{},"body":{"index.html":{}}}],["yes",{"_index":85,"title":{},"body":{"components/ShowdownComponent.html":{},"injectables/ShowdownConverter.html":{},"pipes/ShowdownPipe.html":{},"directives/SourceDirective.html":{}}}],["yisrael",{"_index":496,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["zoom",{"_index":270,"title":{},"body":{"modules/ShowdownModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/ShowdownComponent.html":{"url":"components/ShowdownComponent.html","title":"component - ShowdownComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ShowdownComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/showdown.component.ts\n\n\n\n    \n        Description\n    \n    \n        A angular component for render Markdown to HTML.\nExample\nSetup as standalone\nimport { NgModule } from '@angular/core';\nimport { ShowdownComponent } from 'ngx-showdown';\n\n@NgModule({\n  declarations: [ ShowdownComponent ];\n})\nexport class AppModule {}Bind markdown value and options object\nimport { Component } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n@Component({\n  selector: 'some',\n  template: ''\n})\nexport class SomeComponent {\n  text: string = `\n    # Some header\n    ---\n    **Some bold**\n  `;\n  options: Showdown.ShowdownOptions = { smartIndentationFix: true };\n  // ...\n}Bind single option (it have properties for all showdown options).\n# Some text :+1:Set static markdown value.\nUse as directive on anther element.\nStatic markdown value in the element content.\n\n   \n      # List:\n      * a\n           * A\n      * b\n   \nSet template reference variable.\nOr\n\n    \n\n    \n        Extends\n    \n    \n                ShowdownConverter\n    \n\n    \n        Implements\n    \n    \n                OnInit\n                OnChanges\n                \n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n            \n                exportAs\n                showdown\n            \n\n\n\n\n\n\n\n            \n                selector\n                showdown,[showdown]\n            \n\n\n\n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                setOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                options\n                            \n                            \n                                sanitize\n                            \n                            \n                                showdown\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    showdown\n                                \n                                \n                                    options\n                                \n                                \n                                    sanitize\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(_elementRef: ElementRef, _domSanitizer?: DomSanitizer, config?: ShowdownConfig)\n                    \n                \n                        \n                            \n                                Defined in src/showdown.component.ts:245\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _elementRef\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _domSanitizer\n                                                  \n                                                        \n                                                                    DomSanitizer\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ShowdownConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :     Showdown.ShowdownOptions\n\n                    \n                \n                        \n                            \n                                    Defined in src/showdown.component.ts:203\n                            \n                        \n                \n                    \n                        The showdown options of the converter.\nExample :\nBind options\nimport { Component } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n@Component({\n  selector: `some`,\n  template: `# Some Header`\n})\nexport class SomeComponent {\n  options: Showdown.ShowdownOptions = {headerLevelStart: 3};\n  // ...\n}Or\n # Indentation Fix\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sanitize\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/showdown.component.ts:243\n                            \n                        \n                \n                    \n                        Enables html sanitize, it will sanitize the converter html output by DomSanitizer.\nExample :\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'some',\n  styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n  template: `\n    Input\n    \n     Sanitize\n    Markdown\n    {{ text }}\n    Preview\n    \n      \n    \n  `;\n})\nexport class SomeComponent {\n   text: string = `# A cool link\nclick me`;\n}\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        showdown\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/showdown.component.ts:174\n                            \n                        \n                \n                    \n                        Input alias to value.\nExample :\nEquivalent to\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/showdown.component.ts:158\n                            \n                        \n                \n                    \n                        The input markdown value.\nExample :\nSet some static markdown value.\nBind property with markdown value.\n\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render(value?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/showdown.component.ts:280\n                \n            \n\n\n            \n                \n                    Convert the markdown value of ShowdownComponent to html and set the html result to the element content.\nExample :\n# Some Header\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nA markdown value to render (it will override the current value of ShowdownComponent#value)\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    setOptions(options: Showdown.ShowdownOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ShowdownConverter\n\n                \n            \n            \n                \n                        Defined in         ShowdownConverter:53\n\n                \n            \n\n\n            \n                \n                    Set options to the converter.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            Showdown.ShowdownOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nA options object to set.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        showdown\n                    \n                \n\n\n                \n                    \n                        setshowdown(value: string)\n                    \n                \n                            \n                                \n                                    Defined in src/showdown.component.ts:174\n                                \n                            \n                    \n                        \n                                Input alias to value.\nExample :\nEquivalent to\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in src/showdown.component.ts:203\n                                \n                            \n                    \n                        \n                                The showdown options of the converter.\nExample :\nBind options\nimport { Component } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n@Component({\n  selector: `some`,\n  template: `# Some Header`\n})\nexport class SomeComponent {\n  options: Showdown.ShowdownOptions = {headerLevelStart: 3};\n  // ...\n}Or\n # Indentation Fix\n\n                                \n                                \n                                \n                                    Returns :     Showdown.ShowdownOptions\n\n                                \n                        \n                    \n\n                \n                    \n                        setoptions(options: Showdown.ShowdownOptions)\n                    \n                \n                            \n                                \n                                    Defined in src/showdown.component.ts:207\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            options\n                                                    \n                                                            \n                                                                        Showdown.ShowdownOptions\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        sanitize\n                    \n                \n\n\n                \n                    \n                        setsanitize(sanitize: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/showdown.component.ts:243\n                                \n                            \n                    \n                        \n                                Enables html sanitize, it will sanitize the converter html output by DomSanitizer.\nExample :\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'some',\n  styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n  template: `\n    Input\n    \n     Sanitize\n    Markdown\n    {{ text }}\n    Preview\n    \n      \n    \n  `;\n})\nexport class SomeComponent {\n   text: string = `# A cool link\nclick me`;\n}\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            sanitize\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, ElementRef, Input, OnChanges, OnInit, Optional, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\nimport { ShowdownConverter } from './showdown-converter.provider';\n\n/**\n * @internal\n */\nconst MAP_OPTION = {\n  '': true,\n  true: true,\n  false: false\n};\n\n/**\n * @internal\n */\nlet _toOption = (value: any) => MAP_OPTION.hasOwnProperty(value) ? MAP_OPTION[value] : value;\n\n/**\n * The options keys for the dynamic properties set.\n * @internal\n */\nconst OPTIONS_PROPERTIES_KEYS: string[] = [\n  'backslashEscapesHTMLTags',\n  'completeHTMLDocument',\n  'disableForced4SpacesIndentedSublists',\n  'emoji',\n  'encodeEmails',\n  'ghCodeBlocks',\n  'ghCompatibleHeaderId',\n  'ghMentions',\n  'ghMentionsLink',\n  'headerLevelStart',\n  'literalMidWordAsterisks',\n  'literalMidWordUnderscores',\n  'metadata',\n  'noHeaderId',\n  'omitExtraWLInCodeBlocks',\n  'openLinksInNewWindow',\n  'parseImgDimensions',\n  'prefixHeaderId',\n  'rawHeaderId',\n  'rawPrefixHeaderId',\n  'requireSpaceBeforeHeadingText',\n  'simpleLineBreaks',\n  'simplifiedAutoLink',\n  'smartIndentationFix',\n  'smoothLivePreview',\n  'splitAdjacentBlockquotes',\n  'strikethrough',\n  'tables',\n  'tablesHeaderId',\n  'tasklists',\n  'underline'\n];\n\n// For the options setter properties that dynamic definition (the code after the class)\nexport interface ShowdownComponent extends Showdown.ShowdownOptions {\n}\n\n/**\n * A angular component for render `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownComponent } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownComponent ];\n * })\n * export class AppModule {}\n * ```\n *\n * Bind markdown value and options object\n * ```typescript\n * import { Component } from '@angular/core';\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: ''\n * })\n * export class SomeComponent {\n *   text: string = `\n *     # Some header\n *     ---\n *     **Some bold**\n *   `;\n *   options: Showdown.ShowdownOptions = { smartIndentationFix: true };\n *   // ...\n * }\n * ```\n * Bind single option (it have properties for all showdown options).\n * ```html\n * # Some text :+1:\n * ```\n *\n * Set static markdown value.\n * ```html\n * \n * ```\n *\n * Use as directive on anther element.\n * ```html\n * \n * ```\n *\n * Static markdown value in the element content.\n * ```html\n * \n *    \n *       # List:\n *       * a\n *            * A\n *       * b\n *    \n * \n * ```\n *\n * Set template reference variable.\n * ```html\n * \n * ```\n * Or\n * ```html\n * \n * ```\n */\n@Component({\n  selector: 'showdown,[showdown]',\n  template: '',\n  exportAs: 'showdown',\n  inputs: OPTIONS_PROPERTIES_KEYS\n})\nexport class ShowdownComponent extends ShowdownConverter implements OnInit, OnChanges, Showdown.ShowdownOptions {\n\n  /**\n   * The input markdown value.\n   *\n   * __Example :__\n   *\n   * Set some static markdown value.\n   * ```html\n   * \n   * ```\n   *\n   * Bind property with markdown value.\n   * ```html\n   * \n   * \n   * ```\n   */\n  @Input() value: string;\n\n  /**\n   * Input alias to `value`.\n   *\n   * __Example :__\n   *\n   * ```html\n   * \n   * ```\n   *\n   * Equivalent to\n   * ```html\n   * \n   * ```\n   */\n  @Input() set showdown(value: string) {\n    this.value = value;\n  }\n\n  /**\n   * The showdown options of the converter.\n   *\n   * __Example :__\n   *\n   * Bind options\n   * ```typescript\n   * import { Component } from '@angular/core';\n   * import * as Showdown from 'showdown';\n   *\n   * @Component({\n   *   selector: `some`,\n   *   template: `# Some Header`\n   * })\n   * export class SomeComponent {\n   *   options: Showdown.ShowdownOptions = {headerLevelStart: 3};\n   *   // ...\n   * }\n   * ```\n   * Or\n   * ```html\n   *  # Indentation Fix\n   * ```\n   */\n  @Input()\n  get options(): Showdown.ShowdownOptions {\n    return this.getOptions();\n  }\n\n  set options(options: Showdown.ShowdownOptions) {\n    this.setOptions(options);\n  }\n\n  private _sanitize: boolean;\n\n  /**\n   * Enables html sanitize, it will sanitize the converter html output by [`DomSanitizer`](https://angular.io/api/platform-browser/DomSanitizer#sanitize).\n   *\n   * __Example :__\n   *\n   * ```typescript\n   * import { Component } from '@angular/core';\n   *\n   * @Component({\n   *   selector: 'some',\n   *   styles: [`.box { width: 95%; padding: 5px; border: 1px solid black;}`],\n   *   template: `\n   *     Input\n   *     \n   *      Sanitize\n   *     Markdown\n   *     {{ text }}\n   *     Preview\n   *     \n   *       \n   *     \n   *   `;\n   * })\n   * export class SomeComponent {\n   *    text: string = `# A cool link\n   * click me`;\n   * }\n   * ```\n   */\n  @Input()\n  set sanitize(sanitize: boolean) {\n    this._sanitize = _toOption(sanitize);\n  }\n\n  constructor(private _elementRef: ElementRef, @Optional() private _domSanitizer?: DomSanitizer, @Optional() config?: ShowdownConfig) {\n    super(config);\n  }\n\n  /**\n   * A angular lifecycle method, Use on init to check if it `content` type and load the element `content` to `value`.\n   * @internal\n   */\n  ngOnInit(): void {\n    if (this.value === undefined && this._elementRef.nativeElement.innerHTML.trim() !== '') {\n      this.render(this._elementRef.nativeElement.innerHTML);\n    }\n  }\n\n  /**\n   * A angular lifecycle method, Use to call to render method after changes.\n   * @internal\n   */\n  ngOnChanges(): void {\n    this.render();\n  }\n\n  /**\n   * Convert the markdown value of {@link ShowdownComponent#value} to html and set the html result to the element content.\n   *\n   * __Example :__\n   *\n   * ```html\n   * # Some Header\n   * \n   * ```\n   * @param value - A markdown value to render (it will override the current value of `ShowdownComponent#value`)\n   */\n  public render(value?: string): void {\n    if (typeof value === 'string') {\n      this.value = value;\n    }\n\n    if (typeof this.value === 'string') {\n      let result = this.makeHtml(this.value);\n\n      if (this._sanitize) {\n        result = this._domSanitizer.sanitize(SecurityContext.HTML, result);\n      }\n\n      this._elementRef.nativeElement.innerHTML = result;\n    }\n  }\n\n}\n\n// Define options properties setter for angular directive and direct access\nfor (let key of OPTIONS_PROPERTIES_KEYS) {\n  Object.defineProperty(ShowdownComponent.prototype, key, {\n    set(value: any): void {\n      this.setOption(key, _toOption(value));\n    },\n    configurable: true\n  });\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'ShowdownComponent', 'selector': 'showdown,[showdown]'}];\n    var DIRECTIVES = [{'name': 'SourceDirective', 'selector': 'showdown[src],[showdown][src]'}];\n    var ACTUAL_COMPONENT = {'name': 'ShowdownComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ShowdownConverter.html":{"url":"injectables/ShowdownConverter.html","title":"injectable - ShowdownConverter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ShowdownConverter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/showdown-converter.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Example\nSetup as standalone\nimport { NgModule } from '@angular/core';\nimport { ShowdownConverter } from 'ngx-showdown';\n\n@NgModule({\n  providers: [ ShowdownConverter ];\n})\nexport class AppModule {}Use the converter instance.\nimport { Injectable } from '@angular/core';\nimport { ShowdownConverter } from 'ngx-showdown';\n\n@Injectable()\nexport class SomeService {\n  constructor(showdownConverter: ShowdownConverter) {\n    let markdown: string = \"**Some**\";\n    let html: string = showdownConverter.makeHtml(markdown);\n    console.log(`some:\\nmarkdown: ${markdown)\\nhtml: ${html}\\n`);\n  }\n}\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                setOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config?: ShowdownConfig)\n                    \n                \n                        \n                            \n                                Defined in src/showdown-converter.provider.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ShowdownConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    setOptions(options: Showdown.ShowdownOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/showdown-converter.provider.ts:53\n                \n            \n\n\n            \n                \n                    Set options to the converter.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            Showdown.ShowdownOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nA options object to set.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Optional } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\n\n/**\n * @internal\n */\nlet {hasOwnProperty} = {};\n\n/**\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @NgModule({\n *   providers: [ ShowdownConverter ];\n * })\n * export class AppModule {}\n * ```\n *\n * Use the converter instance.\n * ```typescript\n * import { Injectable } from '@angular/core';\n * import { ShowdownConverter } from 'ngx-showdown';\n *\n * @Injectable()\n * export class SomeService {\n *   constructor(showdownConverter: ShowdownConverter) {\n *     let markdown: string = \"**Some**\";\n *     let html: string = showdownConverter.makeHtml(markdown);\n *     console.log(`some:\\nmarkdown: ${markdown)\\nhtml: ${html}\\n`);\n *   }\n * }\n * ```\n */\n@Injectable()\nexport class ShowdownConverter extends Showdown.Converter {\n\n  constructor(@Optional() config?: ShowdownConfig) {\n    super(config && {extensions: config.extensions});\n    this.setFlavor((config && config.flavor) || 'vanilla');\n    this.setOptions(config);\n  }\n\n  /**\n   * Set options to the converter.\n   *\n   * @param options - A options object to set.\n   */\n  public setOptions(options: Showdown.ShowdownOptions): void {\n    for (let key in options) {\n      if (hasOwnProperty.call(options, key)) {\n        this.setOption(key, options[key]);\n      }\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ShowdownModule.html":{"url":"modules/ShowdownModule.html","title":"module - ShowdownModule","body":"\n                   \n\n\n\n\n    Modules\n    ShowdownModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ShowdownModule\n\n\n\ncluster_ShowdownModule_providers\n\n\n\ncluster_ShowdownModule_declarations\n\n\n\ncluster_ShowdownModule_exports\n\n\n\n\nDECLARATIONS\n\nDECLARATIONS\n\n\n\nShowdownModule\n\nShowdownModule\n\nShowdownModule -->\n\nDECLARATIONS->ShowdownModule\n\n\n\n\n\nDECLARATIONS \n\nDECLARATIONS \n\nDECLARATIONS  -->\n\nShowdownModule->DECLARATIONS \n\n\n\n\n\nShowdownConverter\n\nShowdownConverter\n\nShowdownModule -->\n\nShowdownConverter->ShowdownModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/showdown.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Example\nAdd ShowdownModule to app imports.\nimport { NgModule } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModule({\n  imports: [ ShowdownModule ];\n})\nexport class AppModule {}\n        \n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            DECLARATIONS\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            ShowdownConverter\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DECLARATIONS\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(config: ShowdownConfig | Showdown.ConverterOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/showdown.module.ts:59\n                \n            \n\n\n            \n                \n                    Example :\nAdd ShowdownModule to app imports with config.\nimport { NgModule } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModule({\n  imports: [ ShowdownModule.forRoot({\n    smartIndentationFix: true,\n    foo: 'bar',\n    flavor: 'github',\n    extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]\n  }) ];\n})\nexport class AppModule {}\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            ShowdownConfig | Showdown.ConverterOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nA root converter config for all converter instances.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { ModuleWithProviders, NgModule } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConfig } from './showdown-config.provider';\nimport { ShowdownConverter } from './showdown-converter.provider';\nimport { ShowdownComponent } from './showdown.component';\nimport { ShowdownPipe } from './showdown.pipe';\nimport { SourceDirective } from './source.directive';\n\n/**\n * @internal\n */\nconst DECLARATIONS = [\n  ShowdownComponent,\n  ShowdownPipe,\n  SourceDirective\n];\n\n/**\n * ### Example\n *\n * Add `ShowdownModule` to app `imports`.\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownModule } from 'ngx-showdown';\n *\n * @NgModule({\n *   imports: [ ShowdownModule ];\n * })\n * export class AppModule {}\n * ```\n */\n@NgModule({\n  declarations: DECLARATIONS,\n  providers: [ShowdownConverter],\n  exports: DECLARATIONS\n})\nexport class ShowdownModule {\n\n  /**\n   * __Example :__\n   *\n   * Add `ShowdownModule` to app `imports` with config.\n   * ```typescript\n   * import { NgModule } from '@angular/core';\n   * import { ShowdownModule } from 'ngx-showdown';\n   *\n   * @NgModule({\n   *   imports: [ ShowdownModule.forRoot({\n   *     smartIndentationFix: true,\n   *     foo: 'bar',\n   *     flavor: 'github',\n   *     extensions: [ {type:'listener', listeners: {'codeBlocks.after': console.log}} ]\n   *   }) ];\n   * })\n   * export class AppModule {}\n   * ```\n   * @param config - A root converter config for all converter instances.\n   */\n  static forRoot(config: ShowdownConfig | Showdown.ConverterOptions): ModuleWithProviders {\n    return {\n      ngModule: ShowdownModule,\n      providers: [{provide: ShowdownConfig, useValue: config}]\n    };\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/ShowdownPipe.html":{"url":"pipes/ShowdownPipe.html","title":"pipe - ShowdownPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  ShowdownPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/showdown.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A angular pipe to transform Markdown to HTML.\nExample\nSetup as standalone\nimport { NgModule } from '@angular/core';\nimport { ShowdownPipe } from 'ngx-showdown';\n\n@NgModule({\n  declarations: [ ShowdownPipe ];\n})\nexport class AppModule {}Transform markdown value to html.\n\nTransform markdown value to html with options.\nimport * as Showdown from 'showdown';\n\n@Component({\n  selector: 'some',\n  template: ``\n})\nexport class SomeComponent {\n  text: string = \"__Some Underline__\";\n  options: Showdown.ShowdownOptions = { underline: true };\n  // ...\n}\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        showdown\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: string, options?: Showdown.ShowdownOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/showdown.pipe.ts:55\n                \n            \n\n\n            \n                \n                    Transform markdown value to html.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe markdown value to transform to html.\n\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                            Showdown.ShowdownOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nA Showdown converter options.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Returns the transform result of value to html.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport * as Showdown from 'showdown';\nimport { ShowdownConverter } from './showdown-converter.provider';\n\n/**\n * A angular pipe to transform `Markdown` to `HTML`.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { ShowdownPipe } from 'ngx-showdown';\n *\n * @NgModule({\n *   declarations: [ ShowdownPipe ];\n * })\n * export class AppModule {}\n * ```\n *\n * Transform markdown value to html.\n * ```html\n * \n * \n * ```\n *\n * Transform markdown value to html with `options`.\n * ```typescript\n * import * as Showdown from 'showdown';\n *\n * @Component({\n *   selector: 'some',\n *   template: ``\n * })\n * export class SomeComponent {\n *   text: string = \"__Some Underline__\";\n *   options: Showdown.ShowdownOptions = { underline: true };\n *   // ...\n * }\n * ```\n */\n@Pipe({\n  name: 'showdown',\n  pure: false\n})\nexport class ShowdownPipe extends ShowdownConverter implements PipeTransform {\n\n  /**\n   * Transform markdown value to html.\n   *\n   * @param value - The markdown value to transform to html.\n   * @param options - A `Showdown` converter options.\n   * @returns Returns the transform result of `value` to html.\n   */\n  transform(value: string, options?: Showdown.ShowdownOptions): string {\n    this.setOptions(options);\n    return this.makeHtml(value);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/SourceDirective.html":{"url":"directives/SourceDirective.html","title":"directive - SourceDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  SourceDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/source.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A angular directive to ShowdownComponent for make http request of markdown content.\nExample\nSetup as standalone\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ShowdownComponent, SourceDirective } from 'ngx-showdown';\n\n@NgModule({\n   declarations: [ ShowdownComponent, SourceDirective ],\n   imports: [ HttpClientModule ]\n})\nexport class AppModule {}Bind url src directive\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'some',\n    template: '**Loading...**\n})\nclass SomeComponent {\n    url: string = 'https://unpkg.com/ngx-showdown/README.md';\n    // ...\n}Set static url\nSet template reference variable\nListening to error events.\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        showdown[src],[showdown][src]\n                    \n\n\n\n                    \n                        exportAs\n                        source\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                load\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                src\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_showdownComponent: ShowdownComponent, _http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/source.directive.ts:87\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _showdownComponent\n                                                  \n                                                        \n                                                                        ShowdownComponent\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        src\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/source.directive.ts:75\n                            \n                        \n                \n                    \n                        The source url of the markdown content.\nExample :\nSet static url to src directive.\nBind url to src directive.\n\nLoad\n**Loading...**\n                    \n                \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        error\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/source.directive.ts:87\n                            \n                        \n                \n                    \n                        On error occur.\nExample :\n\n '+$event.message)\">**Loading...**\n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        load\n                        \n                    \n                \n            \n            \n                \n                    \n                    load(url?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/source.directive.ts:112\n                \n            \n\n\n            \n                \n                    Load the markdown content of SourceDirective url to ShowdownComponent.\nExample :\n\nLoad\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        \nA url of markdown content to load (it will override the current url of SourceDirective#src)\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Directive, EventEmitter, Input, OnChanges, Output } from '@angular/core';\nimport { ShowdownComponent } from './showdown.component';\n\n/**\n * A angular directive to `ShowdownComponent` for make http request of markdown content.\n *\n * ### Example\n *\n * Setup as standalone\n * ```typescript\n * import { NgModule } from '@angular/core';\n * import { HttpClientModule } from '@angular/common/http';\n * import { ShowdownComponent, SourceDirective } from 'ngx-showdown';\n *\n * @NgModule({\n *    declarations: [ ShowdownComponent, SourceDirective ],\n *    imports: [ HttpClientModule ]\n * })\n * export class AppModule {}\n * ```\n *\n * Bind url `src` directive\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *     selector: 'some',\n *     template: '**Loading...**\n * })\n * class SomeComponent {\n *     url: string = 'https://unpkg.com/ngx-showdown/README.md';\n *     // ...\n * }\n * ```\n *\n * Set static url\n * ```html\n * \n * ```\n *\n * Set template reference variable\n * ```html\n * \n * ```\n *\n * Listening to `error` events.\n * ```html\n * \n * ```\n */\n@Directive({\n  selector: 'showdown[src],[showdown][src]',\n  exportAs: 'source'\n})\nexport class SourceDirective implements OnChanges {\n\n  /**\n   * The source url of the markdown content.\n   *\n   * __Example :__\n   *\n   * Set static url to `src` directive.\n   * ```html\n   * \n   * ```\n   *\n   * Bind url to `src` directive.\n   * ```html\n   * \n   * Load\n   * **Loading...**\n   * ```\n   */\n  @Input() src: string;\n\n  /**\n   * On error occur.\n   *\n   * __Example :__\n   *\n   * ```html\n   * \n   *  '+$event.message)\">**Loading...**\n   * ```\n   */\n  @Output() error: EventEmitter = new EventEmitter();\n\n  constructor(private _showdownComponent: ShowdownComponent, private _http: HttpClient) {\n  }\n\n  /**\n   * A angular lifecycle method, Use to call to `load` method on src init/changes\n   * @internal\n   */\n  ngOnChanges(): void {\n    this.load();\n  }\n\n  /**\n   * Load the markdown content of {@link SourceDirective#src} url to {@link ShowdownComponent#value}.\n   *\n   * __Example :__\n   *\n   * ```html\n   * \n   * Load\n   * \n   * ```\n   * @param url - A url of markdown content to load (it will override the current url of `SourceDirective#src`)\n   */\n  public load(url?: string): void {\n    if (url) {\n      this.src = url;\n    }\n\n    if (this.src) {\n      this\n        ._http\n        .get(this.src, {responseType: 'text'})\n        .subscribe((response: string) => {\n          this._showdownComponent.render(response);\n        }, (error: HttpErrorResponse) => {\n          this.error.emit(error);\n        });\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/showdown-converter.provider.ts\n            \n            injectable\n            ShowdownConverter\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/showdown.component.ts\n            \n            component\n            ShowdownComponent\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/showdown.pipe.ts\n            \n            pipe\n            ShowdownPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/source.directive.ts\n            \n            directive\n            SourceDirective\n            \n                80 %\n                (4/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.6.2\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^16.0.0\n        \n            @angular/core : ^16.0.0\n        \n            @angular/platform-browser : ^16.0.0\n        \n            @types/showdown : ^2.0.1\n        \n            showdown : ^2.1.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n  Angular Showdown\n\n\n\n\n\n\n\n\n\n\n\nngx-showdown is an Angular (>=2) integration for Showdown, A Markdown to HTML converter.\n\nDemo\n\nDemo app in source code (live).\nYou can play with it in Stackblitz and Plunker.\n\nInstall\n$ npm install ngx-showdown --saveand install peer dependencies (@angular/common/http for SourceDirective)\n$ npm install showdown @angular/common @angular/platform-browser --saveand install type package of Showdown for TypeScript \n$ npm install @types/showdown --save-devUsage\nFor more information and explanations, see the full documentation.\nSetup ShowdownModule in your app.\nAdd ShowdownModule to imports of App.\nimport { NgModule } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModule({\n  imports: [ ShowdownModule ]\n})\nexport class AppModule {}Or with config (it will init ShowdownConfig provider)\nimport { NgModule } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModule({\n  imports: [ ShowdownModule.forRoot({emoji: true, noHeaderId: true, flavor: 'github'}) ]\n})\nexport class AppModule {}Add showdown to allowedCommonJsDependencies in the build config of the angular.json file (From angular >= 10).\n\"build\": {\n  \"builder\": \"@angular-devkit/build-angular:browser\",\n  \"options\": {\n     \"allowedCommonJsDependencies\": [\n        \"showdown\"\n     ]\n     ...\n   }\n   ...\n},\nUse ShowdownComponent in the template\nBinding to [value] property\nBind markdown value to value property of showdown component.\n\nBind value and options.\nimport { Component } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n@Component({\n  selector: 'some',\n  template: ''\n})\nexport class SomeComponent {\n  text: string = `\n# h1\n## h2\n`;\n  options: Showdown.ShowdownOptions = {...};\n  // ...\n}As directive on anther element \nMarkdown in component content\nA markdown value in the component content.  \n\n# H1\n## H2\nWith options\n\n    * a\n    * b\n    * c\nAs directive on anther element \n:showdown:**howdown**Load .md content (by SourceDirective)\nLoad markdown content of url source.\nBind input url to src directive.\n\n**No Url..**Note: Loading markdown content requires HttpClient of @angular/common/http\nMixing sources\nWhen both Content and [value], It will render [value].\n# ContentWhen both Content and [src], It will render Content and when src loads then results will be src content. \n# ContentWhen both [value] and [src], It will render [value] and when src loads then results will be src content. \nBinding options\nBind options object (it init root ShowdownConfig and then set the bind options)\nimport { Component } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n@Component({\n  selector: `some`,\n  template: ``\n})\nexport class SomeComponent {\n  text: string = '# Some';\n  options: Showdown.ShowdownOptions = {noHeaderId: true};\n  // ...\n}Or\n# abcBind single option (it have input properties for all showdown options).\n# abcSanitize the convert html output\nSanitize the convert html output by DomSanitizer.\n\n# Some\nClick\n__Foo__\nAlso sanitize content of src url.\nUse ShowdownPipe in the template\nTransform markdown value of text property to html. \n{{ text | showdown }}Transform value with options (it init root ShowdownConfig and then set the pipe options)\nimport { Component } from '@angular/core';\nimport * as Showdown from 'showdown';\n\n@Component({\n  selector: 'some',\n  template: '{{ text | showdown:options }}'\n})\nexport class SomeComponent {\n  text: string = `\n      # h1\n      ## h2\n  `;\n  options: Showdown.ShowdownOptions = {smartIndentationFix: true};\n  // ...\n}Use ShowdownConverter service\nimport { Injectable } from '@angular/core';\nimport { ShowdownConverter } from 'ngx-showdown';\n\n@Injectable()\nexport class SomeService {\n  constructor(showdownConverter: ShowdownConverter){\n    console.log(showdownConverter.makeHtml('# Showdown'));\n  }\n}Set config provider (ShowdownConfig)\nSet root config that will be injected to ShowdownComponent, ShowdownPipe, ShowdownConverter when they are created.\nimport { NgModel } from '@angular/core';\nimport { ShowdownModule, ShowdownConverter } from 'ngx-showdown';\nimport * as Showdown from 'showdown';\n\nlet colorExtension: Showdown.FilterExtension = {\n  type: 'output',\n  filter(text: string, converter: ShowdownConverter){\n    return text.replace('$color', converter.getOption('color') || 'green')\n  }\n};\n\n@NgModel({\n  imports:[\n    ShowdownModule.forRoot({\n      flavor: 'original',\n      emoji: true,\n      color: 'red',\n      extensions: [ colorExtension ]\n    })\n  ]\n})\nexport class AppModule {}Override the root config provider value.\nimport { Component } from '@angular/core';\nimport { ShowdownConfig } from 'ngx-showdown';\n\n@Component({\n  selector: 'some',\n  template: '# Header',\n  providers: [ {provide: ShowdownConfig, useValue: {underline: true, emoji: false}} ]\n})\nexport class SomeComponent {}Set the config manually by the converter methods.\nimport { Component } from '@angular/core';\nimport { ShowdownComponent } from 'ngx-showdown';\nimport highlightExtension from 'showdown-highlight';\nimport 'highlight.js/styles/default.css';\n\n@Component({\n  selector: 'some',\n  template: '# Header'\n})\nexport class SomeComponent {\n  constructor(showdownComponent: ShowdownComponent) {\n    showdownComponent.addExtension(highlightExtension);\n    showdownComponent.setFlavor('ghost');\n    showdownComponent.setOptions({emoji: true});\n  }\n}Flavor\nSet root flavor (Showdown flavors).\nimport { NgModel } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModel({\n  imports:[\n    ShowdownModule.forRoot({flavor: 'github'})\n  ]\n})\nexport class AppModule {}Note: If flavor is not set then the default value is 'vanilla' flavor.\nConverterOptions\nSet root ConverterOptions (Showdown options).\nimport { NgModel } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\n\n@NgModel({\n  imports:[\n    ShowdownModule.forRoot({underline: true, emoji: false})\n  ]\n})\nexport class AppModule {}Extensions\nSet root Extensions (Showdown extensions).\nWith extension can be made changes to the Markdown input ('lang') and the Html output also listen to parse event, you can make extension or search in npm for existing extension.\nimport { NgModel } from '@angular/core';\nimport { ShowdownModule } from 'ngx-showdown';\nimport * as Showdown from 'showdown';\nimport highlightExtension from 'showdown-highlight';\nimport 'highlight.js/styles/default.css';\n\nlet someExtension: Showdown.ShowdownExtension = {\n  type: 'lang',\n  regex: new RegExp('markdown', 'g'),\n  replace: 'showdown'\n};\n\n\n@NgModel({\n  imports: [ \n    ShowdownModule.forRoot({extensions: [ someExtension, highlightExtension ]}) \n  ]\n})\nexport class AppModule {}Troubleshoot\nInterpolation\nUsing unescaped {} ({}) in template causes an template parse error (@angular/angular/#11859), \nThe solution is to use escape chars (html char code etc.), \nAnther solution is to override the default interpolation.\nWhitespaces\nAngular aot compiler remove whitespaces by default, use ngPreserveWhitespaces to preserve whitespaces. \n\n* a\n  * 1\n  * 2\n* b\nWith ngPreserveWhitespaces\n* a\n  * 1\n  * 2\n* bWithout ngPreserveWhitespaces\n* a * 1 * 2\n* bIndentation\nShowdown converter smartIndentationFix option can fix string indentation problems of es6 template and html. \ntext = `\n  # A\n  ## B\n`;With smartIndentationFix\n# A\n## BWithout smartIndentationFix\n  # A\n  ## BContribute\nPull requests are welcome!\nDevelopment\nThis project built with Angular Cli.\nInstall dependencies\n$ yarn installRun test\n$ yarn testBuild for release\n$ yarn buildCredits\nThis project use Showdown library to convert Markdown to Html.\nLicense\nCopyright © Yisrael Eliav,\nLicensed under the MIT license.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright © Yisrael Eliav\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ShowdownModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ShowdownModule\n\n\n\ncluster_ShowdownModule_declarations\n\n\n\ncluster_ShowdownModule_exports\n\n\n\ncluster_ShowdownModule_providers\n\n\n\n\nDECLARATIONS\n\nDECLARATIONS\n\n\n\nShowdownModule\n\nShowdownModule\n\nShowdownModule -->\n\nDECLARATIONS->ShowdownModule\n\n\n\n\n\nDECLARATIONS \n\nDECLARATIONS \n\nDECLARATIONS  -->\n\nShowdownModule->DECLARATIONS \n\n\n\n\n\nShowdownConverter\n\nShowdownConverter\n\nShowdownModule -->\n\nShowdownConverter->ShowdownModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    1 Pipe\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0-semantically-released\n        \n            Description : A Angular (>=2) integration for Showdown\n        \n            Keywords : ng, ng2, ngx, angular, angular2, markdown, md, showdown, convert, converter, parse, parser\n        \n            Homepage : http://yisraelx.github.io/ngx-showdown\n        \n            Bugs : https://github.com/yisraelx/ngx-showdown/issues\n        \n            License : MIT\n        \n            Repository : https://github.com/yisraelx/ngx-showdown.git\n        \n            Author : Yisrael Eliav\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
